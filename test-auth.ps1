# Script de teste do sistema de autentica√ß√£o CEPAS
Write-Host "üß™ Testando Sistema de Autentica√ß√£o CEPAS" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan

# Esperar o backend estar online
Write-Host "‚è≥ Aguardando backend estar dispon√≠vel..." -ForegroundColor Yellow
do {
    Start-Sleep -Seconds 2
    try {
        $null = Invoke-RestMethod -Uri "http://localhost:3001/api/ping" -Method GET -ErrorAction Stop
        $backendOnline = $true
    } catch {
        $backendOnline = $false
    }
} while (-not $backendOnline)

Write-Host "‚úÖ Backend est√° online!" -ForegroundColor Green

# Teste 1: Login com credenciais v√°lidas
Write-Host "üîê Teste 1: Login com admin" -ForegroundColor Cyan
try {
    $loginResponse = Invoke-RestMethod -Uri "http://localhost:3001/api/auth/login" -Method POST -ContentType "application/json" -Body '{"username":"admin","password":"admin123"}'
    
    Write-Host "Resposta recebida com sucesso" -ForegroundColor Green
    
    if ($loginResponse.tokens.accessToken) {
        Write-Host "‚úÖ Login do admin funcionou!" -ForegroundColor Green
        $token = $loginResponse.tokens.accessToken
        Write-Host "üîë Token obtido: $($token.Substring(0, [Math]::Min(20, $token.Length)))..." -ForegroundColor Yellow
        
        # Teste 2: Acessar endpoint protegido
        Write-Host "üõ°Ô∏è Teste 2: Acessando endpoint protegido" -ForegroundColor Cyan
        $headers = @{ Authorization = "Bearer $token" }
        
        try {
            $protectedResponse = Invoke-RestMethod -Uri "http://localhost:3001/api/auth/me" -Method GET -Headers $headers
            
            if ($protectedResponse.user.username -eq "admin") {
                Write-Host "‚úÖ Acesso autorizado funcionou!" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Erro no acesso autorizado" -ForegroundColor Red
            }
        } catch {
            Write-Host "‚ùå Erro no acesso autorizado: $($_.Exception.Message)" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ùå Token n√£o encontrado na resposta" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Falha no login do admin: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 3: Login com credenciais inv√°lidas
Write-Host "üö´ Teste 3: Login com credenciais inv√°lidas" -ForegroundColor Cyan
try {
    $invalidResponse = Invoke-RestMethod -Uri "http://localhost:3001/api/auth/login" -Method POST -ContentType "application/json" -Body '{"username":"admin","password":"senhaerrada"}' -ErrorAction Stop
    Write-Host "‚ùå Login inv√°lido n√£o foi rejeitado!" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "‚úÖ Rejei√ß√£o de credenciais inv√°lidas funcionou!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro inesperado na valida√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Teste 4: Testar acesso sem token
Write-Host "üö™ Teste 4: Acesso sem token" -ForegroundColor Cyan
try {
    $noTokenResponse = Invoke-RestMethod -Uri "http://localhost:3001/api/auth/me" -Method GET -ErrorAction Stop
    Write-Host "‚ùå Endpoint n√£o est√° protegido corretamente" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "‚úÖ Prote√ß√£o de endpoint funcionou!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro inesperado: $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "=========================================" -ForegroundColor Cyan
Write-Host "üéâ Testes de autentica√ß√£o conclu√≠dos!" -ForegroundColor Green