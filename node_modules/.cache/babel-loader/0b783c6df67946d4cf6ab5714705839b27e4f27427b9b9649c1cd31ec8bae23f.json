{"ast":null,"code":"// src/config/adminAccess.js\n// Configura√ß√£o especial para garantir acesso total de administradores\n/**\r\n * Configura√ß√£o de acesso administrativo\r\n * ADMINS t√™m poder M√ÅXIMO e podem fazer TUDO no sistema\r\n */export const ADMIN_ACCESS_CONFIG={// Lista de usu√°rios que sempre t√™m acesso total (al√©m dos admins)\nSUPER_USERS:['admin','administrador','root','super_admin'],// Rotas que SEMPRE est√£o dispon√≠veis para admins\nADMIN_ALWAYS_ALLOWED_ROUTES:['/cadastro-familia','/cadastro-monitor','/lista-familias','/lista-monitores','/editar-familia',// Consulta geral removida\n'/admin','/configuracoes','/usuarios','/relatorios'],// A√ß√µes que admins SEMPRE podem fazer\nADMIN_ALWAYS_ALLOWED_ACTIONS:['read','write','update','delete','create','manage','configure','admin'],// Recursos que admins SEMPRE podem gerenciar\nADMIN_ALWAYS_ALLOWED_RESOURCES:['familias','monitores','usuarios','entrevistas','cadastros','relatorios','configuracoes','sistema','dados']};/**\r\n * Verifica se um usu√°rio √© um super admin com acesso total\r\n * @param {Object} user - Dados do usu√°rio\r\n * @returns {boolean} - true se √© super admin\r\n */export const isSuperAdmin=user=>{if(!user)return false;// Verifica por role\nconst role=(user.role||user.tipo_usuario||'').toLowerCase();if(role==='admin'||role==='administrador'){return true;}// Verifica por username espec√≠fico\nconst username=(user.username||user.nome_usuario||user.email||'').toLowerCase();return ADMIN_ACCESS_CONFIG.SUPER_USERS.some(superUser=>username.includes(superUser.toLowerCase()));};/**\r\n * For√ßa o acesso para administradores - BYPASS completo de permiss√µes\r\n * @param {Object} user - Dados do usu√°rio\r\n * @param {string} action - A√ß√£o desejada\r\n * @param {string} resource - Recurso alvo\r\n * @returns {boolean} - true se deve permitir acesso\r\n */export const forceAdminAccess=(user,action,resource)=>{// Se √© super admin, SEMPRE permite\nif(isSuperAdmin(user)){console.log(\"\\uD83D\\uDD13 ADMIN ACCESS: Usu\\xE1rio \".concat(user.nome_usuario||user.email,\" tem acesso TOTAL como administrador\"));return true;}return false;};/**\r\n * Verifica se uma rota √© sempre permitida para admins\r\n * @param {Object} user - Dados do usu√°rio  \r\n * @param {string} route - Rota desejada\r\n * @returns {boolean} - true se deve permitir\r\n */export const forceAdminRouteAccess=(user,route)=>{if(isSuperAdmin(user)){// Admin pode acessar QUALQUER rota\nconsole.log(\"\\uD83D\\uDD13 ADMIN ROUTE ACCESS: Administrador \".concat(user.nome_usuario||user.email,\" pode acessar rota: \").concat(route));return true;}return false;};/**\r\n * Middleware de autentica√ß√£o que garante acesso administrativo\r\n * @param {Object} user - Dados do usu√°rio\r\n * @param {string} action - A√ß√£o tentada  \r\n * @param {string} resource - Recurso alvo\r\n * @param {Function} normalCheck - Fun√ß√£o de verifica√ß√£o normal de permiss√£o\r\n * @returns {boolean} - Resultado final da verifica√ß√£o\r\n */export const checkAccessWithAdminOverride=(user,action,resource,normalCheck)=>{// PRIMEIRO: Verifica se √© admin com acesso for√ßado\nif(forceAdminAccess(user,action,resource)){return true;}// SEGUNDO: Se n√£o √© admin, usa verifica√ß√£o normal\nreturn normalCheck?normalCheck():false;};/**\r\n * Helper para exibir mensagens de acesso administrativo\r\n * @param {Object} user - Dados do usu√°rio\r\n * @returns {string} - Mensagem apropriada\r\n */export const getAdminAccessMessage=user=>{if(isSuperAdmin(user)){return\"\\u2705 Acesso TOTAL de Administrador confirmado para: \".concat(user.nome_usuario||user.email);}const role=(user===null||user===void 0?void 0:user.role)||(user===null||user===void 0?void 0:user.tipo_usuario)||'Usu√°rio';return\"\\u2139\\uFE0F Acesso baseado no perfil: \".concat(role);};export default{ADMIN_ACCESS_CONFIG,isSuperAdmin,forceAdminAccess,forceAdminRouteAccess,checkAccessWithAdminOverride,getAdminAccessMessage};","map":{"version":3,"names":["ADMIN_ACCESS_CONFIG","SUPER_USERS","ADMIN_ALWAYS_ALLOWED_ROUTES","ADMIN_ALWAYS_ALLOWED_ACTIONS","ADMIN_ALWAYS_ALLOWED_RESOURCES","isSuperAdmin","user","role","tipo_usuario","toLowerCase","username","nome_usuario","email","some","superUser","includes","forceAdminAccess","action","resource","console","log","concat","forceAdminRouteAccess","route","checkAccessWithAdminOverride","normalCheck","getAdminAccessMessage"],"sources":["/home/gustavodias/Downloads/CEPAS/src/config/adminAccess.js"],"sourcesContent":["// src/config/adminAccess.js\r\n// Configura√ß√£o especial para garantir acesso total de administradores\r\n\r\n/**\r\n * Configura√ß√£o de acesso administrativo\r\n * ADMINS t√™m poder M√ÅXIMO e podem fazer TUDO no sistema\r\n */\r\nexport const ADMIN_ACCESS_CONFIG = {\r\n    // Lista de usu√°rios que sempre t√™m acesso total (al√©m dos admins)\r\n    SUPER_USERS: [\r\n        'admin', \r\n        'administrador',\r\n        'root',\r\n        'super_admin'\r\n    ],\r\n    \r\n    // Rotas que SEMPRE est√£o dispon√≠veis para admins\r\n    ADMIN_ALWAYS_ALLOWED_ROUTES: [\r\n        '/cadastro-familia',\r\n        '/cadastro-monitor',\r\n        '/lista-familias', \r\n        '/lista-monitores',\r\n        '/editar-familia',\r\n        // Consulta geral removida\r\n        '/admin',\r\n        '/configuracoes',\r\n        '/usuarios',\r\n        '/relatorios'\r\n    ],\r\n\r\n    // A√ß√µes que admins SEMPRE podem fazer\r\n    ADMIN_ALWAYS_ALLOWED_ACTIONS: [\r\n        'read',\r\n        'write', \r\n        'update',\r\n        'delete',\r\n        'create',\r\n        'manage',\r\n        'configure',\r\n        'admin'\r\n    ],\r\n\r\n    // Recursos que admins SEMPRE podem gerenciar\r\n    ADMIN_ALWAYS_ALLOWED_RESOURCES: [\r\n        'familias',\r\n        'monitores', \r\n        'usuarios',\r\n        'entrevistas',\r\n        'cadastros',\r\n        'relatorios',\r\n        'configuracoes',\r\n        'sistema',\r\n        'dados'\r\n    ]\r\n};\r\n\r\n/**\r\n * Verifica se um usu√°rio √© um super admin com acesso total\r\n * @param {Object} user - Dados do usu√°rio\r\n * @returns {boolean} - true se √© super admin\r\n */\r\nexport const isSuperAdmin = (user) => {\r\n    if (!user) return false;\r\n    \r\n    // Verifica por role\r\n    const role = (user.role || user.tipo_usuario || '').toLowerCase();\r\n    if (role === 'admin' || role === 'administrador') {\r\n        return true;\r\n    }\r\n    \r\n    // Verifica por username espec√≠fico\r\n    const username = (user.username || user.nome_usuario || user.email || '').toLowerCase();\r\n    return ADMIN_ACCESS_CONFIG.SUPER_USERS.some(superUser => \r\n        username.includes(superUser.toLowerCase())\r\n    );\r\n};\r\n\r\n/**\r\n * For√ßa o acesso para administradores - BYPASS completo de permiss√µes\r\n * @param {Object} user - Dados do usu√°rio\r\n * @param {string} action - A√ß√£o desejada\r\n * @param {string} resource - Recurso alvo\r\n * @returns {boolean} - true se deve permitir acesso\r\n */\r\nexport const forceAdminAccess = (user, action, resource) => {\r\n    // Se √© super admin, SEMPRE permite\r\n    if (isSuperAdmin(user)) {\r\n        console.log(`üîì ADMIN ACCESS: Usu√°rio ${user.nome_usuario || user.email} tem acesso TOTAL como administrador`);\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n};\r\n\r\n/**\r\n * Verifica se uma rota √© sempre permitida para admins\r\n * @param {Object} user - Dados do usu√°rio  \r\n * @param {string} route - Rota desejada\r\n * @returns {boolean} - true se deve permitir\r\n */\r\nexport const forceAdminRouteAccess = (user, route) => {\r\n    if (isSuperAdmin(user)) {\r\n        // Admin pode acessar QUALQUER rota\r\n        console.log(`üîì ADMIN ROUTE ACCESS: Administrador ${user.nome_usuario || user.email} pode acessar rota: ${route}`);\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n};\r\n\r\n/**\r\n * Middleware de autentica√ß√£o que garante acesso administrativo\r\n * @param {Object} user - Dados do usu√°rio\r\n * @param {string} action - A√ß√£o tentada  \r\n * @param {string} resource - Recurso alvo\r\n * @param {Function} normalCheck - Fun√ß√£o de verifica√ß√£o normal de permiss√£o\r\n * @returns {boolean} - Resultado final da verifica√ß√£o\r\n */\r\nexport const checkAccessWithAdminOverride = (user, action, resource, normalCheck) => {\r\n    // PRIMEIRO: Verifica se √© admin com acesso for√ßado\r\n    if (forceAdminAccess(user, action, resource)) {\r\n        return true;\r\n    }\r\n    \r\n    // SEGUNDO: Se n√£o √© admin, usa verifica√ß√£o normal\r\n    return normalCheck ? normalCheck() : false;\r\n};\r\n\r\n/**\r\n * Helper para exibir mensagens de acesso administrativo\r\n * @param {Object} user - Dados do usu√°rio\r\n * @returns {string} - Mensagem apropriada\r\n */\r\nexport const getAdminAccessMessage = (user) => {\r\n    if (isSuperAdmin(user)) {\r\n        return `‚úÖ Acesso TOTAL de Administrador confirmado para: ${user.nome_usuario || user.email}`;\r\n    }\r\n    \r\n    const role = user?.role || user?.tipo_usuario || 'Usu√°rio';\r\n    return `‚ÑπÔ∏è Acesso baseado no perfil: ${role}`;\r\n};\r\n\r\nexport default {\r\n    ADMIN_ACCESS_CONFIG,\r\n    isSuperAdmin,\r\n    forceAdminAccess,\r\n    forceAdminRouteAccess,\r\n    checkAccessWithAdminOverride,\r\n    getAdminAccessMessage\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}