{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gusta\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\CEPAS\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Configuração da API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('accessToken'));\n\n  // Configurar interceptador para requests\n  const makeAuthenticatedRequest = async (url, options = {}) => {\n    const authToken = localStorage.getItem('accessToken');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n    if (authToken) {\n      headers.Authorization = `Bearer ${authToken}`;\n    }\n    const response = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers\n    });\n\n    // Se token expirou, tentar renovar\n    if (response.status === 401) {\n      const refreshed = await refreshToken();\n      if (refreshed) {\n        // Tentar novamente com o novo token\n        headers.Authorization = `Bearer ${localStorage.getItem('accessToken')}`;\n        return fetch(`${API_BASE_URL}${url}`, {\n          ...options,\n          headers\n        });\n      } else {\n        // Se não conseguiu renovar, fazer logout\n        logout();\n        throw new Error('Sessão expirada');\n      }\n    }\n    return response;\n  };\n\n  // Verificar usuário logado ao carregar a aplicação\n  useEffect(() => {\n    const checkAuth = async () => {\n      const storedToken = localStorage.getItem('accessToken');\n      if (storedToken) {\n        try {\n          const response = await makeAuthenticatedRequest('/auth/me');\n          if (response.ok) {\n            const data = await response.json();\n            setUser(data.user);\n            setToken(storedToken);\n          } else {\n            // Token inválido, remover\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n          }\n        } catch (error) {\n          console.error('Erro ao verificar autenticação:', error);\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n        }\n      }\n      setIsLoading(false);\n    };\n    checkAuth();\n  }, []);\n\n  // Função de login\n  const login = async (username, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Erro ao fazer login');\n      }\n\n      // Armazenar tokens\n      localStorage.setItem('accessToken', data.tokens.accessToken);\n      localStorage.setItem('refreshToken', data.tokens.refreshToken);\n      setUser(data.user);\n      setToken(data.tokens.accessToken);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Função de logout\n  const logout = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (refreshToken && token) {\n        await makeAuthenticatedRequest('/auth/logout', {\n          method: 'POST',\n          body: JSON.stringify({\n            refreshToken\n          })\n        });\n      }\n    } catch (error) {\n      console.error('Erro ao fazer logout:', error);\n    } finally {\n      // Limpar dados locais independentemente do resultado\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      setUser(null);\n      setToken(null);\n    }\n  };\n\n  // Função para renovar token\n  const refreshToken = async () => {\n    try {\n      const storedRefreshToken = localStorage.getItem('refreshToken');\n      if (!storedRefreshToken) {\n        return false;\n      }\n      const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken: storedRefreshToken\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('accessToken', data.tokens.accessToken);\n        localStorage.setItem('refreshToken', data.tokens.refreshToken);\n        setToken(data.tokens.accessToken);\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      console.error('Erro ao renovar token:', error);\n      return false;\n    }\n  };\n\n  // Verificar se usuário tem permissão\n  const hasPermission = requiredRoles => {\n    if (!user) return false;\n    if (Array.isArray(requiredRoles)) {\n      return requiredRoles.includes(user.tipo_usuario);\n    }\n    return user.tipo_usuario === requiredRoles;\n  };\n  const value = {\n    user,\n    token,\n    isLoading,\n    login,\n    logout,\n    makeAuthenticatedRequest,\n    hasPermission,\n    isAuthenticated: !!user,\n    isAdmin: (user === null || user === void 0 ? void 0 : user.tipo_usuario) === 'admin',\n    isCoordenador: (user === null || user === void 0 ? void 0 : user.tipo_usuario) === 'coordenador',\n    isMonitor: (user === null || user === void 0 ? void 0 : user.tipo_usuario) === 'monitor',\n    isVisualizador: (user === null || user === void 0 ? void 0 : user.tipo_usuario) === 'visualizador'\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"bBLZhaLtoDlKGNxbHZ3NYhVUqes=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","AuthContext","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","token","setToken","localStorage","getItem","makeAuthenticatedRequest","url","options","authToken","headers","Authorization","response","fetch","status","refreshed","refreshToken","logout","Error","checkAuth","storedToken","ok","data","json","removeItem","error","console","login","username","password","method","body","JSON","stringify","message","setItem","tokens","accessToken","storedRefreshToken","hasPermission","requiredRoles","Array","isArray","includes","tipo_usuario","value","isAuthenticated","isAdmin","isCoordenador","isMonitor","isVisualizador","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gusta/OneDrive/Área de Trabalho/CEPAS/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\n// Configuração da API\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [token, setToken] = useState(localStorage.getItem('accessToken'));\r\n\r\n    // Configurar interceptador para requests\r\n    const makeAuthenticatedRequest = async (url, options = {}) => {\r\n        const authToken = localStorage.getItem('accessToken');\r\n        \r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers,\r\n        };\r\n\r\n        if (authToken) {\r\n            headers.Authorization = `Bearer ${authToken}`;\r\n        }\r\n\r\n        const response = await fetch(`${API_BASE_URL}${url}`, {\r\n            ...options,\r\n            headers,\r\n        });\r\n\r\n        // Se token expirou, tentar renovar\r\n        if (response.status === 401) {\r\n            const refreshed = await refreshToken();\r\n            if (refreshed) {\r\n                // Tentar novamente com o novo token\r\n                headers.Authorization = `Bearer ${localStorage.getItem('accessToken')}`;\r\n                return fetch(`${API_BASE_URL}${url}`, {\r\n                    ...options,\r\n                    headers,\r\n                });\r\n            } else {\r\n                // Se não conseguiu renovar, fazer logout\r\n                logout();\r\n                throw new Error('Sessão expirada');\r\n            }\r\n        }\r\n\r\n        return response;\r\n    };\r\n\r\n    // Verificar usuário logado ao carregar a aplicação\r\n    useEffect(() => {\r\n        const checkAuth = async () => {\r\n            const storedToken = localStorage.getItem('accessToken');\r\n            \r\n            if (storedToken) {\r\n                try {\r\n                    const response = await makeAuthenticatedRequest('/auth/me');\r\n                    \r\n                    if (response.ok) {\r\n                        const data = await response.json();\r\n                        setUser(data.user);\r\n                        setToken(storedToken);\r\n                    } else {\r\n                        // Token inválido, remover\r\n                        localStorage.removeItem('accessToken');\r\n                        localStorage.removeItem('refreshToken');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Erro ao verificar autenticação:', error);\r\n                    localStorage.removeItem('accessToken');\r\n                    localStorage.removeItem('refreshToken');\r\n                }\r\n            }\r\n            \r\n            setIsLoading(false);\r\n        };\r\n\r\n        checkAuth();\r\n    }, []);\r\n\r\n    // Função de login\r\n    const login = async (username, password) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Erro ao fazer login');\r\n            }\r\n\r\n            // Armazenar tokens\r\n            localStorage.setItem('accessToken', data.tokens.accessToken);\r\n            localStorage.setItem('refreshToken', data.tokens.refreshToken);\r\n            \r\n            setUser(data.user);\r\n            setToken(data.tokens.accessToken);\r\n\r\n            return data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    // Função de logout\r\n    const logout = async () => {\r\n        try {\r\n            const refreshToken = localStorage.getItem('refreshToken');\r\n            \r\n            if (refreshToken && token) {\r\n                await makeAuthenticatedRequest('/auth/logout', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ refreshToken }),\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error('Erro ao fazer logout:', error);\r\n        } finally {\r\n            // Limpar dados locais independentemente do resultado\r\n            localStorage.removeItem('accessToken');\r\n            localStorage.removeItem('refreshToken');\r\n            setUser(null);\r\n            setToken(null);\r\n        }\r\n    };\r\n\r\n    // Função para renovar token\r\n    const refreshToken = async () => {\r\n        try {\r\n            const storedRefreshToken = localStorage.getItem('refreshToken');\r\n            \r\n            if (!storedRefreshToken) {\r\n                return false;\r\n            }\r\n\r\n            const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ refreshToken: storedRefreshToken }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                localStorage.setItem('accessToken', data.tokens.accessToken);\r\n                localStorage.setItem('refreshToken', data.tokens.refreshToken);\r\n                setToken(data.tokens.accessToken);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.error('Erro ao renovar token:', error);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    // Verificar se usuário tem permissão\r\n    const hasPermission = (requiredRoles) => {\r\n        if (!user) return false;\r\n        \r\n        if (Array.isArray(requiredRoles)) {\r\n            return requiredRoles.includes(user.tipo_usuario);\r\n        }\r\n        \r\n        return user.tipo_usuario === requiredRoles;\r\n    };\r\n\r\n    const value = {\r\n        user,\r\n        token,\r\n        isLoading,\r\n        login,\r\n        logout,\r\n        makeAuthenticatedRequest,\r\n        hasPermission,\r\n        isAuthenticated: !!user,\r\n        isAdmin: user?.tipo_usuario === 'admin',\r\n        isCoordenador: user?.tipo_usuario === 'coordenador',\r\n        isMonitor: user?.tipo_usuario === 'monitor',\r\n        isVisualizador: user?.tipo_usuario === 'visualizador'\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}