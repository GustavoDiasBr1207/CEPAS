{"ast":null,"code":"import _objectSpread from\"/home/gustavodias/Downloads/CEPAS/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/utils/permissions.js\n// Utilitários para verificação de permissões de usuários\nimport{forceAdminAccess,forceAdminRouteAccess,isSuperAdmin}from'../config/adminAccess';/**\r\n * Verifica se o usuário tem permissão para realizar uma ação específica\r\n * @param {Object} user - Objeto do usuário com role e outras informações\r\n * @param {string} action - Ação que o usuário quer realizar\r\n * @param {string} resource - Recurso sobre o qual a ação será realizada\r\n * @returns {boolean} - true se permitido, false caso contrário\r\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const hasPermission=function(user,action){let resource=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(!user||!user.role){return false;}// 🔓 PRIMEIRO: Verifica se é admin com acesso forçado (BYPASS TOTAL)\nif(forceAdminAccess(user,action,resource)){return true;}const userRole=(user.role||user.tipo_usuario||'').toLowerCase();// ADMIN tem poder MÁXIMO - pode fazer TUDO no sistema\nif(userRole==='admin'||userRole==='administrador'){console.log(\"\\uD83D\\uDD13 ADMIN PERMISSION: \".concat(user.nome_usuario||user.email,\" tem acesso TOTAL como administrador\"));return true;}// Define as permissões por role\nconst permissions={coordenador:{// Coordenador pode fazer quase tudo, exceto gerenciar usuários\nread:['familias','monitores','relatorios','entrevistas','cadastros'],write:['familias','monitores','entrevistas','cadastros'],update:['familias','monitores','entrevistas','cadastros'],delete:['familias','monitores','entrevistas']},monitor:{// Monitor pode cadastrar e editar famílias, ver listagens\nread:['familias','monitores','relatorios'],write:['familias','entrevistas'],update:['familias','entrevistas'],delete:[]// Monitor não pode deletar\n},visualizador:{// Visualizador só pode ver dados\nread:['familias','monitores','relatorios'],write:[],update:[],delete:[]}};const userPermissions=permissions[userRole];if(!userPermissions){return false;}// Verifica se o usuário tem permissão para a ação específica\nif(userPermissions[action]&&userPermissions[action].includes(resource)){return true;}return false;};/**\r\n * Verifica se o usuário pode acessar uma rota específica\r\n * @param {Object} user - Objeto do usuário\r\n * @param {string} route - Rota que o usuário quer acessar\r\n * @returns {boolean} - true se permitido, false caso contrário\r\n */export const canAccessRoute=(user,route)=>{if(!user){return false;}// 🔓 PRIMEIRO: Verifica se é admin com acesso forçado (BYPASS TOTAL)\nif(forceAdminRouteAccess(user,route)){return true;}const userRole=(user.role||user.tipo_usuario||'').toLowerCase();// ADMIN pode acessar TODAS as rotas\nif(userRole==='admin'||userRole==='administrador'){console.log(\"\\uD83D\\uDD13 ADMIN ROUTE: \".concat(user.nome_usuario||user.email,\" pode acessar QUALQUER rota como administrador\"));return true;}// Define as rotas permitidas por role\nconst routePermissions={coordenador:['/cadastro-familia','/cadastro-monitor','/lista-familias','/lista-monitores','/editar-familia'],monitor:['/cadastro-familia','/lista-familias','/lista-monitores','/editar-familia'],visualizador:['/lista-familias','/lista-monitores']};const allowedRoutes=routePermissions[userRole]||[];return allowedRoutes.some(allowedRoute=>route.startsWith(allowedRoute));};/**\r\n * Retorna uma mensagem de erro personalizada baseada na permissão negada\r\n * @param {Object} user - Objeto do usuário\r\n * @param {string} action - Ação negada\r\n * @param {string} resource - Recurso relacionado\r\n * @returns {string} - Mensagem de erro\r\n */export const getPermissionErrorMessage=(user,action,resource)=>{const userRole=(user===null||user===void 0?void 0:user.role)||'usuário não autenticado';const actionMessages={'delete':\"Seu perfil (\".concat(userRole,\") n\\xE3o tem permiss\\xE3o para deletar \").concat(resource,\". Apenas administradores e coordenadores podem realizar esta a\\xE7\\xE3o.\"),'write':\"Seu perfil (\".concat(userRole,\") n\\xE3o tem permiss\\xE3o para criar \").concat(resource,\". Contate um administrador.\"),'update':\"Seu perfil (\".concat(userRole,\") n\\xE3o tem permiss\\xE3o para editar \").concat(resource,\". Contate um administrador.\"),'read':\"Seu perfil (\".concat(userRole,\") n\\xE3o tem permiss\\xE3o para visualizar \").concat(resource,\".\")};return actionMessages[action]||\"Permiss\\xE3o negada para a a\\xE7\\xE3o '\".concat(action,\"' no recurso '\").concat(resource,\"'.\");};/**\r\n * Utilitário para criar componentes protegidos por permissão\r\n * @param {Function} Component - Componente a ser renderizado\r\n * @param {string} requiredPermission - Permissão necessária\r\n * @param {string} resource - Recurso relacionado\r\n * @returns {Function} - Componente protegido\r\n */export const withPermission=(Component,action,resource)=>{return function ProtectedComponent(props){const user=props.user||props.auth&&props.auth.user;if(!hasPermission(user,action,resource)){return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px',textAlign:'center',background:'#f8d7da',border:'1px solid #f5c6cb',borderRadius:'8px',color:'#721c24'},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDEAB Acesso Negado\"}),/*#__PURE__*/_jsx(\"p\",{children:getPermissionErrorMessage(user,action,resource)}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Seu perfil:\"}),\" \",(user===null||user===void 0?void 0:user.role)||'Não autenticado']})]});}return/*#__PURE__*/_jsx(Component,_objectSpread({},props));};};export default{hasPermission,canAccessRoute,getPermissionErrorMessage,withPermission};","map":{"version":3,"names":["forceAdminAccess","forceAdminRouteAccess","isSuperAdmin","jsx","_jsx","jsxs","_jsxs","hasPermission","user","action","resource","arguments","length","undefined","role","userRole","tipo_usuario","toLowerCase","console","log","concat","nome_usuario","email","permissions","coordenador","read","write","update","delete","monitor","visualizador","userPermissions","includes","canAccessRoute","route","routePermissions","allowedRoutes","some","allowedRoute","startsWith","getPermissionErrorMessage","actionMessages","withPermission","Component","ProtectedComponent","props","auth","style","padding","textAlign","background","border","borderRadius","color","children","_objectSpread"],"sources":["/home/gustavodias/Downloads/CEPAS/src/utils/permissions.js"],"sourcesContent":["// src/utils/permissions.js\r\n// Utilitários para verificação de permissões de usuários\r\n\r\nimport { forceAdminAccess, forceAdminRouteAccess, isSuperAdmin } from '../config/adminAccess';\r\n\r\n/**\r\n * Verifica se o usuário tem permissão para realizar uma ação específica\r\n * @param {Object} user - Objeto do usuário com role e outras informações\r\n * @param {string} action - Ação que o usuário quer realizar\r\n * @param {string} resource - Recurso sobre o qual a ação será realizada\r\n * @returns {boolean} - true se permitido, false caso contrário\r\n */\r\nexport const hasPermission = (user, action, resource = null) => {\r\n    if (!user || !user.role) {\r\n        return false;\r\n    }\r\n\r\n    // 🔓 PRIMEIRO: Verifica se é admin com acesso forçado (BYPASS TOTAL)\r\n    if (forceAdminAccess(user, action, resource)) {\r\n        return true;\r\n    }\r\n\r\n    const userRole = (user.role || user.tipo_usuario || '').toLowerCase();\r\n\r\n    // ADMIN tem poder MÁXIMO - pode fazer TUDO no sistema\r\n    if (userRole === 'admin' || userRole === 'administrador') {\r\n        console.log(`🔓 ADMIN PERMISSION: ${user.nome_usuario || user.email} tem acesso TOTAL como administrador`);\r\n        return true;\r\n    }\r\n\r\n    // Define as permissões por role\r\n    const permissions = {\r\n        coordenador: {\r\n            // Coordenador pode fazer quase tudo, exceto gerenciar usuários\r\n            read: ['familias', 'monitores', 'relatorios', 'entrevistas', 'cadastros'],\r\n            write: ['familias', 'monitores', 'entrevistas', 'cadastros'],\r\n            update: ['familias', 'monitores', 'entrevistas', 'cadastros'],\r\n            delete: ['familias', 'monitores', 'entrevistas']\r\n        },\r\n        monitor: {\r\n            // Monitor pode cadastrar e editar famílias, ver listagens\r\n            read: ['familias', 'monitores', 'relatorios'],\r\n            write: ['familias', 'entrevistas'],\r\n            update: ['familias', 'entrevistas'],\r\n            delete: [] // Monitor não pode deletar\r\n        },\r\n        visualizador: {\r\n            // Visualizador só pode ver dados\r\n            read: ['familias', 'monitores', 'relatorios'],\r\n            write: [],\r\n            update: [],\r\n            delete: []\r\n        }\r\n    };\r\n\r\n    const userPermissions = permissions[userRole];\r\n    if (!userPermissions) {\r\n        return false;\r\n    }\r\n\r\n    // Verifica se o usuário tem permissão para a ação específica\r\n    if (userPermissions[action] && userPermissions[action].includes(resource)) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Verifica se o usuário pode acessar uma rota específica\r\n * @param {Object} user - Objeto do usuário\r\n * @param {string} route - Rota que o usuário quer acessar\r\n * @returns {boolean} - true se permitido, false caso contrário\r\n */\r\nexport const canAccessRoute = (user, route) => {\r\n    if (!user) {\r\n        return false;\r\n    }\r\n\r\n    // 🔓 PRIMEIRO: Verifica se é admin com acesso forçado (BYPASS TOTAL)\r\n    if (forceAdminRouteAccess(user, route)) {\r\n        return true;\r\n    }\r\n\r\n    const userRole = (user.role || user.tipo_usuario || '').toLowerCase();\r\n\r\n    // ADMIN pode acessar TODAS as rotas\r\n    if (userRole === 'admin' || userRole === 'administrador') {\r\n        console.log(`🔓 ADMIN ROUTE: ${user.nome_usuario || user.email} pode acessar QUALQUER rota como administrador`);\r\n        return true;\r\n    }\r\n\r\n    // Define as rotas permitidas por role\r\n    const routePermissions = {\r\n        coordenador: [\r\n            '/cadastro-familia',\r\n            '/cadastro-monitor', \r\n            '/lista-familias',\r\n            '/lista-monitores',\r\n            '/editar-familia'\r\n        ],\r\n        monitor: [\r\n            '/cadastro-familia',\r\n            '/lista-familias',\r\n            '/lista-monitores',\r\n            '/editar-familia'\r\n        ],\r\n        visualizador: [\r\n            '/lista-familias',\r\n            '/lista-monitores'\r\n        ]\r\n    };\r\n\r\n    const allowedRoutes = routePermissions[userRole] || [];\r\n    return allowedRoutes.some(allowedRoute => route.startsWith(allowedRoute));\r\n};\r\n\r\n/**\r\n * Retorna uma mensagem de erro personalizada baseada na permissão negada\r\n * @param {Object} user - Objeto do usuário\r\n * @param {string} action - Ação negada\r\n * @param {string} resource - Recurso relacionado\r\n * @returns {string} - Mensagem de erro\r\n */\r\nexport const getPermissionErrorMessage = (user, action, resource) => {\r\n    const userRole = user?.role || 'usuário não autenticado';\r\n    \r\n    const actionMessages = {\r\n        'delete': `Seu perfil (${userRole}) não tem permissão para deletar ${resource}. Apenas administradores e coordenadores podem realizar esta ação.`,\r\n        'write': `Seu perfil (${userRole}) não tem permissão para criar ${resource}. Contate um administrador.`,\r\n        'update': `Seu perfil (${userRole}) não tem permissão para editar ${resource}. Contate um administrador.`,\r\n        'read': `Seu perfil (${userRole}) não tem permissão para visualizar ${resource}.`\r\n    };\r\n\r\n    return actionMessages[action] || `Permissão negada para a ação '${action}' no recurso '${resource}'.`;\r\n};\r\n\r\n/**\r\n * Utilitário para criar componentes protegidos por permissão\r\n * @param {Function} Component - Componente a ser renderizado\r\n * @param {string} requiredPermission - Permissão necessária\r\n * @param {string} resource - Recurso relacionado\r\n * @returns {Function} - Componente protegido\r\n */\r\nexport const withPermission = (Component, action, resource) => {\r\n    return function ProtectedComponent(props) {\r\n        const user = props.user || (props.auth && props.auth.user);\r\n        \r\n        if (!hasPermission(user, action, resource)) {\r\n            return (\r\n                <div style={{\r\n                    padding: '20px',\r\n                    textAlign: 'center',\r\n                    background: '#f8d7da',\r\n                    border: '1px solid #f5c6cb',\r\n                    borderRadius: '8px',\r\n                    color: '#721c24'\r\n                }}>\r\n                    <h3>🚫 Acesso Negado</h3>\r\n                    <p>{getPermissionErrorMessage(user, action, resource)}</p>\r\n                    <p><strong>Seu perfil:</strong> {user?.role || 'Não autenticado'}</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return <Component {...props} />;\r\n    };\r\n};\r\n\r\nexport default {\r\n    hasPermission,\r\n    canAccessRoute,\r\n    getPermissionErrorMessage,\r\n    withPermission\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}