{"ast":null,"code":"/**\r\n * validationHelpers.js\r\n * Funções auxiliares para validação de dados do formulário de família\r\n */\n\n/**\r\n * Valida os dados básicos da família\r\n * @param {Object} familiaData - Dados da família\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\nexport function validateFamiliaData(familiaData) {\n  const errors = [];\n\n  // Validações obrigatórias\n  if (!familiaData.nome_familia || familiaData.nome_familia.trim() === '') {\n    errors.push('Nome da família é obrigatório');\n  }\n  if (familiaData.nome_familia && familiaData.nome_familia.length > 150) {\n    errors.push('Nome da família deve ter no máximo 150 caracteres');\n  }\n\n  // Validações opcionais com limite de caracteres\n  if (familiaData.migracao && familiaData.migracao.length > 50) {\n    errors.push('Campo migração deve ter no máximo 50 caracteres');\n  }\n  if (familiaData.estado_origem && familiaData.estado_origem.length > 80) {\n    errors.push('Estado de origem deve ter no máximo 80 caracteres');\n  }\n  if (familiaData.cidade_origem && familiaData.cidade_origem.length > 80) {\n    errors.push('Cidade de origem deve ter no máximo 80 caracteres');\n  }\n  if (familiaData.convenio && familiaData.convenio.length > 120) {\n    errors.push('Nome do convênio deve ter no máximo 120 caracteres');\n  }\n\n  // Validação de campos numéricos (0 ou 1)\n  if (![0, 1].includes(familiaData.recebe_beneficio)) {\n    errors.push('Campo \"Recebe Benefício\" deve ser 0 ou 1');\n  }\n  if (![0, 1].includes(familiaData.possui_plano_saude)) {\n    errors.push('Campo \"Possui Plano de Saúde\" deve ser 0 ou 1');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n/**\r\n * Valida os dados do endereço\r\n * @param {Object} enderecoData - Dados do endereço\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\nexport function validateEnderecoData(enderecoData) {\n  const errors = [];\n  if (enderecoData.quadra && enderecoData.quadra.length > 30) {\n    errors.push('Quadra deve ter no máximo 30 caracteres');\n  }\n  if (enderecoData.rua && enderecoData.rua.length > 100) {\n    errors.push('Rua deve ter no máximo 100 caracteres');\n  }\n  if (enderecoData.numero_casa && enderecoData.numero_casa.length > 20) {\n    errors.push('Número da casa deve ter no máximo 20 caracteres');\n  }\n  if (enderecoData.complemento && enderecoData.complemento.length > 150) {\n    errors.push('Complemento deve ter no máximo 150 caracteres');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n/**\r\n * Valida os dados dos animais\r\n * @param {Object} animalData - Dados dos animais\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\nexport function validateAnimalData(animalData) {\n  const errors = [];\n  if (![0, 1].includes(animalData.tem_animal)) {\n    errors.push('Campo \"Possui Animais\" deve ser 0 ou 1');\n  }\n  if (animalData.tem_animal === 1) {\n    if (!animalData.qtd_animais || animalData.qtd_animais < 1) {\n      errors.push('Quantidade de animais deve ser informada quando possui animais');\n    }\n    if (!animalData.qual_animal || animalData.qual_animal.trim() === '') {\n      errors.push('Tipo de animais deve ser informado quando possui animais');\n    }\n  }\n  if (animalData.qual_animal && animalData.qual_animal.length > 30) {\n    errors.push('Tipo de animais deve ter no máximo 30 caracteres');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n/**\r\n * Valida os dados da estrutura da habitação\r\n * @param {Object} estruturaData - Dados da estrutura\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\nexport function validateEstruturaData(estruturaData) {\n  const errors = [];\n  const tiposHabitacao = ['Casa', 'Apartamento', 'Barraco', 'Outro'];\n  const tiposLote = ['Próprio', 'Alugado', 'Cedido', 'Financiado'];\n  const situacoesConvivencia = ['Somente a família', 'Com outras famílias', 'Com parentes'];\n  const materiaisParede = ['Tijolo', 'Adobe', 'Madeira', 'Lona', 'Outro'];\n  const materiaisPiso = ['Cimento', 'Cerâmica', 'Terra batida', 'Madeira', 'Outro'];\n  const materiaisCobertura = ['Telha', 'Laje', 'Zinco', 'Lona', 'Outro'];\n  if (estruturaData.tipo_habitacao && !tiposHabitacao.includes(estruturaData.tipo_habitacao)) {\n    errors.push('Tipo de habitação inválido');\n  }\n  if (estruturaData.tipo_lote && !tiposLote.includes(estruturaData.tipo_lote)) {\n    errors.push('Tipo de lote inválido');\n  }\n  if (estruturaData.situacao_convivencia && !situacoesConvivencia.includes(estruturaData.situacao_convivencia)) {\n    errors.push('Situação de convivência inválida');\n  }\n  if (estruturaData.material_parede && !materiaisParede.includes(estruturaData.material_parede)) {\n    errors.push('Material da parede inválido');\n  }\n  if (estruturaData.material_piso && !materiaisPiso.includes(estruturaData.material_piso)) {\n    errors.push('Material do piso inválido');\n  }\n  if (estruturaData.material_cobertura && !materiaisCobertura.includes(estruturaData.material_cobertura)) {\n    errors.push('Material da cobertura inválido');\n  }\n  if (![0, 1].includes(estruturaData.energia_eletrica)) {\n    errors.push('Campo \"Energia Elétrica\" deve ser 0 ou 1');\n  }\n  if (estruturaData.qtd_quartos && estruturaData.qtd_quartos < 0) {\n    errors.push('Quantidade de quartos não pode ser negativa');\n  }\n  if (estruturaData.qtd_camas && estruturaData.qtd_camas < 0) {\n    errors.push('Quantidade de camas não pode ser negativa');\n  }\n  if (estruturaData.tipo_camas && estruturaData.tipo_camas.length > 100) {\n    errors.push('Tipo de camas deve ter no máximo 100 caracteres');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n/**\r\n * Valida os dados de saneamento\r\n * @param {Object} saneamentoData - Dados de saneamento\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\nexport function validateSaneamentoData(saneamentoData) {\n  const errors = [];\n  const destinosLixo = ['Coleta pública', 'Céu aberto', 'Enterra', 'Queima'];\n  const tiposBebeAgua = ['Filtrada', 'Fervida', 'Tratada', 'Sem tratamento'];\n  const oriensAgua = ['Fervida', 'Coleta', 'Cisterna', 'Poço'];\n  if (![0, 1].includes(saneamentoData.horta)) {\n    errors.push('Campo \"Horta\" deve ser 0 ou 1');\n  }\n  if (![0, 1].includes(saneamentoData.arvore_frutifera)) {\n    errors.push('Campo \"Árvore Frutífera\" deve ser 0 ou 1');\n  }\n  if (![0, 1].includes(saneamentoData.tem_banheiro)) {\n    errors.push('Campo \"Tem Banheiro\" deve ser 0 ou 1');\n  }\n  if (saneamentoData.dest_lixo && !destinosLixo.includes(saneamentoData.dest_lixo)) {\n    errors.push('Destino do lixo inválido');\n  }\n  if (saneamentoData.bebe_agua && !tiposBebeAgua.includes(saneamentoData.bebe_agua)) {\n    errors.push('Tipo de água para beber inválido');\n  }\n  if (saneamentoData.trata_agua && !oriensAgua.includes(saneamentoData.trata_agua)) {\n    errors.push('Origem da água inválida');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n/**\r\n * Valida todos os dados do formulário completo\r\n * @param {Object} formData - Dados completos do formulário\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\nexport function validateCompleteForm(formData) {\n  const allErrors = [];\n\n  // Valida dados da família\n  const familiaValidation = validateFamiliaData(formData);\n  allErrors.push(...familiaValidation.errors);\n\n  // Valida endereço se fornecido\n  if (formData.endereco && Object.keys(formData.endereco).some(key => formData.endereco[key])) {\n    const enderecoValidation = validateEnderecoData(formData.endereco);\n    allErrors.push(...enderecoValidation.errors);\n  }\n\n  // Valida dados de animais\n  if (formData.animal) {\n    const animalValidation = validateAnimalData(formData.animal);\n    allErrors.push(...animalValidation.errors);\n  }\n\n  // Valida estrutura se fornecida\n  if (formData.estrutura && Object.keys(formData.estrutura).some(key => formData.estrutura[key] !== '' && formData.estrutura[key] !== null)) {\n    const estruturaValidation = validateEstruturaData(formData.estrutura);\n    allErrors.push(...estruturaValidation.errors);\n  }\n\n  // Valida saneamento se fornecido\n  if (formData.saneamento && Object.keys(formData.saneamento).some(key => formData.saneamento[key] !== '' && formData.saneamento[key] !== null)) {\n    const saneamentoValidation = validateSaneamentoData(formData.saneamento);\n    allErrors.push(...saneamentoValidation.errors);\n  }\n\n  // Valida membros se fornecidos\n  if (formData.membros && Array.isArray(formData.membros)) {\n    const membrosValidation = validateMembrosData(formData.membros);\n    allErrors.push(...membrosValidation.errors);\n  }\n\n  // Valida entrevista se fornecida\n  if (formData.entrevista) {\n    const entrevistaValidation = validateEntrevistaData(formData.entrevista);\n    allErrors.push(...entrevistaValidation.errors);\n  }\n  return {\n    isValid: allErrors.length === 0,\n    errors: allErrors\n  };\n}\n\n/**\r\n * Valida dados dos membros da família\r\n * @param {Array} membros - Array de membros\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\nexport function validateMembrosData(membros) {\n  const errors = [];\n  if (!Array.isArray(membros)) {\n    errors.push('Lista de membros deve ser um array');\n    return {\n      isValid: false,\n      errors\n    };\n  }\n\n  // Validar cada membro\n  membros.forEach((membro, index) => {\n    const membroNum = index + 1;\n\n    // Nome é obrigatório\n    if (!membro.nome || membro.nome.trim() === '') {\n      errors.push(`Membro ${membroNum}: Nome é obrigatório`);\n    }\n    if (membro.nome && membro.nome.length > 150) {\n      errors.push(`Membro ${membroNum}: Nome deve ter no máximo 150 caracteres`);\n    }\n\n    // Validar data de nascimento se fornecida\n    if (membro.data_nascimento) {\n      const nascimento = new Date(membro.data_nascimento);\n      const hoje = new Date();\n      if (nascimento > hoje) {\n        errors.push(`Membro ${membroNum}: Data de nascimento não pode ser futura`);\n      }\n      const idade = hoje.getFullYear() - nascimento.getFullYear();\n      if (idade > 150) {\n        errors.push(`Membro ${membroNum}: Data de nascimento parece inválida (idade muito alta)`);\n      }\n    }\n\n    // Validar campos de texto com limite\n    if (membro.relacao && membro.relacao.length > 80) {\n      errors.push(`Membro ${membroNum}: Relação deve ter no máximo 80 caracteres`);\n    }\n    if (membro.ocupacao && membro.ocupacao.length > 120) {\n      errors.push(`Membro ${membroNum}: Ocupação deve ter no máximo 120 caracteres`);\n    }\n    if (membro.religiao && membro.religiao.length > 80) {\n      errors.push(`Membro ${membroNum}: Religião deve ter no máximo 80 caracteres`);\n    }\n\n    // Validar criança CEPAS se ativa\n    if (membro.crianca_cepas && membro.crianca_cepas.ativa) {\n      if (!membro.crianca_cepas.data_inicio) {\n        errors.push(`Membro ${membroNum}: Data de início no CEPAS é obrigatória quando participa do programa`);\n      }\n    }\n  });\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n/**\r\n * Valida dados da entrevista\r\n * @param {Object} entrevista - Dados da entrevista\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\nexport function validateEntrevistaData(entrevista) {\n  const errors = [];\n\n  // Data da entrevista é obrigatória\n  if (!entrevista.data_entrevista) {\n    errors.push('Data da entrevista é obrigatória');\n  } else {\n    const dataEntrevista = new Date(entrevista.data_entrevista);\n    const hoje = new Date();\n    if (dataEntrevista > hoje) {\n      errors.push('Data da entrevista não pode ser futura');\n    }\n  }\n\n  // Validar limites de caracteres\n  if (entrevista.entrevistado && entrevista.entrevistado.length > 150) {\n    errors.push('Nome do entrevistado deve ter no máximo 150 caracteres');\n  }\n  if (entrevista.telefone_contato && entrevista.telefone_contato.length > 30) {\n    errors.push('Telefone de contato deve ter no máximo 30 caracteres');\n  }\n\n  // entrevistador_id (opcional) deve ser numérico quando informado\n  if (entrevista.entrevistador_id !== undefined && entrevista.entrevistador_id !== null && String(entrevista.entrevistador_id).trim() !== '') {\n    if (isNaN(Number(entrevista.entrevistador_id))) {\n      errors.push('Identificador do entrevistador (monitor) é inválido');\n    }\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n/**\r\n * Formata mensagens de erro para exibição\r\n * @param {string[]} errors - Array de erros\r\n * @returns {string} Mensagem formatada\r\n */\nexport function formatErrorMessages(errors) {\n  if (errors.length === 0) return '';\n  if (errors.length === 1) {\n    return errors[0];\n  }\n  return `Foram encontrados ${errors.length} problemas:\\n• ${errors.join('\\n• ')}`;\n}","map":{"version":3,"names":["validateFamiliaData","familiaData","errors","nome_familia","trim","push","length","migracao","estado_origem","cidade_origem","convenio","includes","recebe_beneficio","possui_plano_saude","isValid","validateEnderecoData","enderecoData","quadra","rua","numero_casa","complemento","validateAnimalData","animalData","tem_animal","qtd_animais","qual_animal","validateEstruturaData","estruturaData","tiposHabitacao","tiposLote","situacoesConvivencia","materiaisParede","materiaisPiso","materiaisCobertura","tipo_habitacao","tipo_lote","situacao_convivencia","material_parede","material_piso","material_cobertura","energia_eletrica","qtd_quartos","qtd_camas","tipo_camas","validateSaneamentoData","saneamentoData","destinosLixo","tiposBebeAgua","oriensAgua","horta","arvore_frutifera","tem_banheiro","dest_lixo","bebe_agua","trata_agua","validateCompleteForm","formData","allErrors","familiaValidation","endereco","Object","keys","some","key","enderecoValidation","animal","animalValidation","estrutura","estruturaValidation","saneamento","saneamentoValidation","membros","Array","isArray","membrosValidation","validateMembrosData","entrevista","entrevistaValidation","validateEntrevistaData","forEach","membro","index","membroNum","nome","data_nascimento","nascimento","Date","hoje","idade","getFullYear","relacao","ocupacao","religiao","crianca_cepas","ativa","data_inicio","data_entrevista","dataEntrevista","entrevistado","telefone_contato","entrevistador_id","undefined","String","isNaN","Number","formatErrorMessages","join"],"sources":["C:/Users/JoaoPedro/Desktop/CEPAS-1/src/utils/validationHelpers.js"],"sourcesContent":["/**\r\n * validationHelpers.js\r\n * Funções auxiliares para validação de dados do formulário de família\r\n */\r\n\r\n/**\r\n * Valida os dados básicos da família\r\n * @param {Object} familiaData - Dados da família\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\r\nexport function validateFamiliaData(familiaData) {\r\n    const errors = [];\r\n\r\n    // Validações obrigatórias\r\n    if (!familiaData.nome_familia || familiaData.nome_familia.trim() === '') {\r\n        errors.push('Nome da família é obrigatório');\r\n    }\r\n\r\n    if (familiaData.nome_familia && familiaData.nome_familia.length > 150) {\r\n        errors.push('Nome da família deve ter no máximo 150 caracteres');\r\n    }\r\n\r\n    // Validações opcionais com limite de caracteres\r\n    if (familiaData.migracao && familiaData.migracao.length > 50) {\r\n        errors.push('Campo migração deve ter no máximo 50 caracteres');\r\n    }\r\n\r\n    if (familiaData.estado_origem && familiaData.estado_origem.length > 80) {\r\n        errors.push('Estado de origem deve ter no máximo 80 caracteres');\r\n    }\r\n\r\n    if (familiaData.cidade_origem && familiaData.cidade_origem.length > 80) {\r\n        errors.push('Cidade de origem deve ter no máximo 80 caracteres');\r\n    }\r\n\r\n    if (familiaData.convenio && familiaData.convenio.length > 120) {\r\n        errors.push('Nome do convênio deve ter no máximo 120 caracteres');\r\n    }\r\n\r\n    // Validação de campos numéricos (0 ou 1)\r\n    if (![0, 1].includes(familiaData.recebe_beneficio)) {\r\n        errors.push('Campo \"Recebe Benefício\" deve ser 0 ou 1');\r\n    }\r\n\r\n    if (![0, 1].includes(familiaData.possui_plano_saude)) {\r\n        errors.push('Campo \"Possui Plano de Saúde\" deve ser 0 ou 1');\r\n    }\r\n\r\n    return {\r\n        isValid: errors.length === 0,\r\n        errors\r\n    };\r\n}\r\n\r\n/**\r\n * Valida os dados do endereço\r\n * @param {Object} enderecoData - Dados do endereço\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\r\nexport function validateEnderecoData(enderecoData) {\r\n    const errors = [];\r\n\r\n    if (enderecoData.quadra && enderecoData.quadra.length > 30) {\r\n        errors.push('Quadra deve ter no máximo 30 caracteres');\r\n    }\r\n\r\n    if (enderecoData.rua && enderecoData.rua.length > 100) {\r\n        errors.push('Rua deve ter no máximo 100 caracteres');\r\n    }\r\n\r\n    if (enderecoData.numero_casa && enderecoData.numero_casa.length > 20) {\r\n        errors.push('Número da casa deve ter no máximo 20 caracteres');\r\n    }\r\n\r\n    if (enderecoData.complemento && enderecoData.complemento.length > 150) {\r\n        errors.push('Complemento deve ter no máximo 150 caracteres');\r\n    }\r\n\r\n    return {\r\n        isValid: errors.length === 0,\r\n        errors\r\n    };\r\n}\r\n\r\n/**\r\n * Valida os dados dos animais\r\n * @param {Object} animalData - Dados dos animais\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\r\nexport function validateAnimalData(animalData) {\r\n    const errors = [];\r\n\r\n    if (![0, 1].includes(animalData.tem_animal)) {\r\n        errors.push('Campo \"Possui Animais\" deve ser 0 ou 1');\r\n    }\r\n\r\n    if (animalData.tem_animal === 1) {\r\n        if (!animalData.qtd_animais || animalData.qtd_animais < 1) {\r\n            errors.push('Quantidade de animais deve ser informada quando possui animais');\r\n        }\r\n\r\n        if (!animalData.qual_animal || animalData.qual_animal.trim() === '') {\r\n            errors.push('Tipo de animais deve ser informado quando possui animais');\r\n        }\r\n    }\r\n\r\n    if (animalData.qual_animal && animalData.qual_animal.length > 30) {\r\n        errors.push('Tipo de animais deve ter no máximo 30 caracteres');\r\n    }\r\n\r\n    return {\r\n        isValid: errors.length === 0,\r\n        errors\r\n    };\r\n}\r\n\r\n/**\r\n * Valida os dados da estrutura da habitação\r\n * @param {Object} estruturaData - Dados da estrutura\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\r\nexport function validateEstruturaData(estruturaData) {\r\n    const errors = [];\r\n\r\n    const tiposHabitacao = ['Casa', 'Apartamento', 'Barraco', 'Outro'];\r\n    const tiposLote = ['Próprio', 'Alugado', 'Cedido', 'Financiado'];\r\n    const situacoesConvivencia = ['Somente a família', 'Com outras famílias', 'Com parentes'];\r\n    const materiaisParede = ['Tijolo', 'Adobe', 'Madeira', 'Lona', 'Outro'];\r\n    const materiaisPiso = ['Cimento', 'Cerâmica', 'Terra batida', 'Madeira', 'Outro'];\r\n    const materiaisCobertura = ['Telha', 'Laje', 'Zinco', 'Lona', 'Outro'];\r\n\r\n    if (estruturaData.tipo_habitacao && !tiposHabitacao.includes(estruturaData.tipo_habitacao)) {\r\n        errors.push('Tipo de habitação inválido');\r\n    }\r\n\r\n    if (estruturaData.tipo_lote && !tiposLote.includes(estruturaData.tipo_lote)) {\r\n        errors.push('Tipo de lote inválido');\r\n    }\r\n\r\n    if (estruturaData.situacao_convivencia && !situacoesConvivencia.includes(estruturaData.situacao_convivencia)) {\r\n        errors.push('Situação de convivência inválida');\r\n    }\r\n\r\n    if (estruturaData.material_parede && !materiaisParede.includes(estruturaData.material_parede)) {\r\n        errors.push('Material da parede inválido');\r\n    }\r\n\r\n    if (estruturaData.material_piso && !materiaisPiso.includes(estruturaData.material_piso)) {\r\n        errors.push('Material do piso inválido');\r\n    }\r\n\r\n    if (estruturaData.material_cobertura && !materiaisCobertura.includes(estruturaData.material_cobertura)) {\r\n        errors.push('Material da cobertura inválido');\r\n    }\r\n\r\n    if (![0, 1].includes(estruturaData.energia_eletrica)) {\r\n        errors.push('Campo \"Energia Elétrica\" deve ser 0 ou 1');\r\n    }\r\n\r\n    if (estruturaData.qtd_quartos && estruturaData.qtd_quartos < 0) {\r\n        errors.push('Quantidade de quartos não pode ser negativa');\r\n    }\r\n\r\n    if (estruturaData.qtd_camas && estruturaData.qtd_camas < 0) {\r\n        errors.push('Quantidade de camas não pode ser negativa');\r\n    }\r\n\r\n    if (estruturaData.tipo_camas && estruturaData.tipo_camas.length > 100) {\r\n        errors.push('Tipo de camas deve ter no máximo 100 caracteres');\r\n    }\r\n\r\n    return {\r\n        isValid: errors.length === 0,\r\n        errors\r\n    };\r\n}\r\n\r\n/**\r\n * Valida os dados de saneamento\r\n * @param {Object} saneamentoData - Dados de saneamento\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\r\nexport function validateSaneamentoData(saneamentoData) {\r\n    const errors = [];\r\n\r\n    const destinosLixo = ['Coleta pública', 'Céu aberto', 'Enterra', 'Queima'];\r\n    const tiposBebeAgua = ['Filtrada', 'Fervida', 'Tratada', 'Sem tratamento'];\r\n    const oriensAgua = ['Fervida', 'Coleta', 'Cisterna', 'Poço'];\r\n\r\n    if (![0, 1].includes(saneamentoData.horta)) {\r\n        errors.push('Campo \"Horta\" deve ser 0 ou 1');\r\n    }\r\n\r\n    if (![0, 1].includes(saneamentoData.arvore_frutifera)) {\r\n        errors.push('Campo \"Árvore Frutífera\" deve ser 0 ou 1');\r\n    }\r\n\r\n    if (![0, 1].includes(saneamentoData.tem_banheiro)) {\r\n        errors.push('Campo \"Tem Banheiro\" deve ser 0 ou 1');\r\n    }\r\n\r\n    if (saneamentoData.dest_lixo && !destinosLixo.includes(saneamentoData.dest_lixo)) {\r\n        errors.push('Destino do lixo inválido');\r\n    }\r\n\r\n    if (saneamentoData.bebe_agua && !tiposBebeAgua.includes(saneamentoData.bebe_agua)) {\r\n        errors.push('Tipo de água para beber inválido');\r\n    }\r\n\r\n    if (saneamentoData.trata_agua && !oriensAgua.includes(saneamentoData.trata_agua)) {\r\n        errors.push('Origem da água inválida');\r\n    }\r\n\r\n    return {\r\n        isValid: errors.length === 0,\r\n        errors\r\n    };\r\n}\r\n\r\n/**\r\n * Valida todos os dados do formulário completo\r\n * @param {Object} formData - Dados completos do formulário\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\r\nexport function validateCompleteForm(formData) {\r\n    const allErrors = [];\r\n\r\n    // Valida dados da família\r\n    const familiaValidation = validateFamiliaData(formData);\r\n    allErrors.push(...familiaValidation.errors);\r\n\r\n    // Valida endereço se fornecido\r\n    if (formData.endereco && Object.keys(formData.endereco).some(key => formData.endereco[key])) {\r\n        const enderecoValidation = validateEnderecoData(formData.endereco);\r\n        allErrors.push(...enderecoValidation.errors);\r\n    }\r\n\r\n    // Valida dados de animais\r\n    if (formData.animal) {\r\n        const animalValidation = validateAnimalData(formData.animal);\r\n        allErrors.push(...animalValidation.errors);\r\n    }\r\n\r\n    // Valida estrutura se fornecida\r\n    if (formData.estrutura && Object.keys(formData.estrutura).some(key => formData.estrutura[key] !== '' && formData.estrutura[key] !== null)) {\r\n        const estruturaValidation = validateEstruturaData(formData.estrutura);\r\n        allErrors.push(...estruturaValidation.errors);\r\n    }\r\n\r\n    // Valida saneamento se fornecido\r\n    if (formData.saneamento && Object.keys(formData.saneamento).some(key => formData.saneamento[key] !== '' && formData.saneamento[key] !== null)) {\r\n        const saneamentoValidation = validateSaneamentoData(formData.saneamento);\r\n        allErrors.push(...saneamentoValidation.errors);\r\n    }\r\n\r\n    // Valida membros se fornecidos\r\n    if (formData.membros && Array.isArray(formData.membros)) {\r\n        const membrosValidation = validateMembrosData(formData.membros);\r\n        allErrors.push(...membrosValidation.errors);\r\n    }\r\n\r\n    // Valida entrevista se fornecida\r\n    if (formData.entrevista) {\r\n        const entrevistaValidation = validateEntrevistaData(formData.entrevista);\r\n        allErrors.push(...entrevistaValidation.errors);\r\n    }\r\n\r\n    return {\r\n        isValid: allErrors.length === 0,\r\n        errors: allErrors\r\n    };\r\n}\r\n\r\n/**\r\n * Valida dados dos membros da família\r\n * @param {Array} membros - Array de membros\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\r\nexport function validateMembrosData(membros) {\r\n    const errors = [];\r\n\r\n    if (!Array.isArray(membros)) {\r\n        errors.push('Lista de membros deve ser um array');\r\n        return { isValid: false, errors };\r\n    }\r\n\r\n    // Validar cada membro\r\n    membros.forEach((membro, index) => {\r\n        const membroNum = index + 1;\r\n\r\n        // Nome é obrigatório\r\n        if (!membro.nome || membro.nome.trim() === '') {\r\n            errors.push(`Membro ${membroNum}: Nome é obrigatório`);\r\n        }\r\n\r\n        if (membro.nome && membro.nome.length > 150) {\r\n            errors.push(`Membro ${membroNum}: Nome deve ter no máximo 150 caracteres`);\r\n        }\r\n\r\n        // Validar data de nascimento se fornecida\r\n        if (membro.data_nascimento) {\r\n            const nascimento = new Date(membro.data_nascimento);\r\n            const hoje = new Date();\r\n            \r\n            if (nascimento > hoje) {\r\n                errors.push(`Membro ${membroNum}: Data de nascimento não pode ser futura`);\r\n            }\r\n            \r\n            const idade = hoje.getFullYear() - nascimento.getFullYear();\r\n            if (idade > 150) {\r\n                errors.push(`Membro ${membroNum}: Data de nascimento parece inválida (idade muito alta)`);\r\n            }\r\n        }\r\n\r\n        // Validar campos de texto com limite\r\n        if (membro.relacao && membro.relacao.length > 80) {\r\n            errors.push(`Membro ${membroNum}: Relação deve ter no máximo 80 caracteres`);\r\n        }\r\n\r\n        if (membro.ocupacao && membro.ocupacao.length > 120) {\r\n            errors.push(`Membro ${membroNum}: Ocupação deve ter no máximo 120 caracteres`);\r\n        }\r\n\r\n        if (membro.religiao && membro.religiao.length > 80) {\r\n            errors.push(`Membro ${membroNum}: Religião deve ter no máximo 80 caracteres`);\r\n        }\r\n\r\n        // Validar criança CEPAS se ativa\r\n        if (membro.crianca_cepas && membro.crianca_cepas.ativa) {\r\n            if (!membro.crianca_cepas.data_inicio) {\r\n                errors.push(`Membro ${membroNum}: Data de início no CEPAS é obrigatória quando participa do programa`);\r\n            }\r\n        }\r\n    });\r\n\r\n    return {\r\n        isValid: errors.length === 0,\r\n        errors\r\n    };\r\n}\r\n\r\n/**\r\n * Valida dados da entrevista\r\n * @param {Object} entrevista - Dados da entrevista\r\n * @returns {Object} { isValid: boolean, errors: string[] }\r\n */\r\nexport function validateEntrevistaData(entrevista) {\r\n    const errors = [];\r\n\r\n    // Data da entrevista é obrigatória\r\n    if (!entrevista.data_entrevista) {\r\n        errors.push('Data da entrevista é obrigatória');\r\n    } else {\r\n        const dataEntrevista = new Date(entrevista.data_entrevista);\r\n        const hoje = new Date();\r\n        \r\n        if (dataEntrevista > hoje) {\r\n            errors.push('Data da entrevista não pode ser futura');\r\n        }\r\n    }\r\n\r\n    // Validar limites de caracteres\r\n    if (entrevista.entrevistado && entrevista.entrevistado.length > 150) {\r\n        errors.push('Nome do entrevistado deve ter no máximo 150 caracteres');\r\n    }\r\n\r\n    if (entrevista.telefone_contato && entrevista.telefone_contato.length > 30) {\r\n        errors.push('Telefone de contato deve ter no máximo 30 caracteres');\r\n    }\r\n\r\n    // entrevistador_id (opcional) deve ser numérico quando informado\r\n    if (entrevista.entrevistador_id !== undefined && entrevista.entrevistador_id !== null && String(entrevista.entrevistador_id).trim() !== '') {\r\n        if (isNaN(Number(entrevista.entrevistador_id))) {\r\n            errors.push('Identificador do entrevistador (monitor) é inválido');\r\n        }\r\n    }\r\n\r\n    return {\r\n        isValid: errors.length === 0,\r\n        errors\r\n    };\r\n}\r\n\r\n/**\r\n * Formata mensagens de erro para exibição\r\n * @param {string[]} errors - Array de erros\r\n * @returns {string} Mensagem formatada\r\n */\r\nexport function formatErrorMessages(errors) {\r\n    if (errors.length === 0) return '';\r\n    \r\n    if (errors.length === 1) {\r\n        return errors[0];\r\n    }\r\n    \r\n    return `Foram encontrados ${errors.length} problemas:\\n• ${errors.join('\\n• ')}`;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}