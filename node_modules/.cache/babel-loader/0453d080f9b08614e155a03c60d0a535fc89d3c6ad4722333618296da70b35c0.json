{"ast":null,"code":"import _objectSpread from\"/home/gustavodias/Downloads/CEPAS/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * cepasService.js\r\n * Funções para interagir com o Backend (API Node.js/Express) com autenticação.\r\n * Agora compatível com Docker e com funções CRUD completas.\r\n */// Define a URL base para chamadas de API.\n// Usa a variável de ambiente REACT_APP_API_BASE_URL (para Docker) ou volta para localhost (desenvolvimento).\nconst API_BASE_URL=process.env.REACT_APP_API_BASE_URL||'http://localhost:3001/api';// Define o nome da tabela que este serviço irá manipular\nconst TABLE_NAME='Familia';// Função auxiliar para obter headers autenticados\nconst getAuthHeaders=()=>{const token=localStorage.getItem('accessToken');return _objectSpread({'Content-Type':'application/json'},token&&{'Authorization':\"Bearer \".concat(token)});};// Função auxiliar para fazer requests autenticados com renovação automática de token\nconst makeAuthenticatedRequest=async function(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const headers=_objectSpread(_objectSpread({},getAuthHeaders()),options.headers);let response=await fetch(url,_objectSpread(_objectSpread({},options),{},{headers}));// Se token expirou, tentar renovar\nif(response.status===401){const refreshToken=localStorage.getItem('refreshToken');if(refreshToken){try{const refreshResponse=await fetch(\"\".concat(API_BASE_URL,\"/auth/refresh\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({refreshToken})});if(refreshResponse.ok){const data=await refreshResponse.json();localStorage.setItem('accessToken',data.tokens.accessToken);localStorage.setItem('refreshToken',data.tokens.refreshToken);// Tentar novamente com o novo token\nheaders.Authorization=\"Bearer \".concat(data.tokens.accessToken);response=await fetch(url,_objectSpread(_objectSpread({},options),{},{headers}));}else{// Se não conseguiu renovar, redirecionar para login\nlocalStorage.removeItem('accessToken');localStorage.removeItem('refreshToken');window.location.reload();throw new Error('Sessão expirada');}}catch(err){localStorage.removeItem('accessToken');localStorage.removeItem('refreshToken');window.location.reload();throw new Error('Sessão expirada');}}else{throw new Error('Não autorizado');}}return response;};// -------------------------------------------------------------------\n// 1. FUNÇÃO DE CRIAÇÃO (POST) - Rota: POST /api/dados/Familia\n// -------------------------------------------------------------------\n/**\r\n * Envia um novo registro de família completo para o backend.\r\n * Inclui família, endereço, animal, estrutura e saneamento.\r\n * @param {Object} familiaData - Os dados completos da família a serem criados.\r\n * @returns {Object} O objeto de resposta do backend (com o novo ID, por exemplo).\r\n */export async function createFamilia(familiaData){const url=\"\".concat(API_BASE_URL,\"/familia-completa\");// Nova rota específica\ntry{const response=await makeAuthenticatedRequest(url,{method:'POST',body:JSON.stringify(familiaData)});if(!response.ok){let errorMessage='Falha ao cadastrar a família.';try{const errorBody=await response.json();errorMessage=errorBody.message||errorBody.error||errorMessage;}catch(e){// Se não conseguir fazer parse do JSON, usa o texto da resposta\nerrorMessage=(await response.text())||errorMessage;}throw new Error(\"Erro \".concat(response.status,\": \").concat(errorMessage));}return response.json();}catch(error){console.error('Erro no serviço createFamilia:',error);throw error;}}// -------------------------------------------------------------------\n// 2. FUNÇÃO DE CONSULTA (GET) - Rota: GET /api/dados/Familia\n// -------------------------------------------------------------------\n/**\r\n * Busca todos os registros de famílias no backend usando o endpoint otimizado.\r\n * @returns {Array<Object>} Uma lista de objetos de famílias.\r\n */export async function getFamilias(){const url=\"\".concat(API_BASE_URL,\"/familias\");// Novo endpoint otimizado\ntry{const response=await fetch(url,{method:'GET',headers:getAuthHeaders()});if(!response.ok){let errorMessage='Falha ao buscar as famílias.';try{const errorBody=await response.json();errorMessage=errorBody.message||errorBody.error||errorMessage;}catch(e){errorMessage=(await response.text())||errorMessage;}throw new Error(\"Erro \".concat(response.status,\": \").concat(errorMessage));}const result=await response.json();return result.data||[];// Retorna o array de dados\n}catch(error){console.error('Erro no serviço getFamilias:',error);throw error;}}// -------------------------------------------------------------------\n// 3. FUNÇÃO DE ATUALIZAÇÃO (PUT) - Rota: PUT /api/dados/Familia/:id\n// -------------------------------------------------------------------\n/**\r\n * Atualiza um registro de família existente.\r\n * @param {string | number} id - O ID da família a ser atualizada.\r\n * @param {Object} familiaData - Os dados da família a serem atualizados.\r\n * @returns {Object} O objeto de resposta do backend.\r\n */export async function updateFamilia(id,familiaData){// Usa a nova rota de família completa para atualização\nconst url=\"\".concat(API_BASE_URL,\"/familia/\").concat(id);try{const response=await makeAuthenticatedRequest(url,{method:'PUT',body:JSON.stringify(familiaData)});if(!response.ok){const errorBody=await response.json();throw new Error(\"Erro \".concat(response.status,\": \").concat(errorBody.error||'Falha ao atualizar a família.'));}return response.json();}catch(error){console.error('Erro no serviço updateFamilia:',error);throw error;}}// -------------------------------------------------------------------\n// 4. FUNÇÃO DE EXCLUSÃO (DELETE) - Rota: DELETE /api/dados/Familia/:id\n// -------------------------------------------------------------------\n/**\r\n * Exclui um registro de família.\r\n * @param {string | number} id - O ID da família a ser excluída.\r\n * @returns {Object} O objeto de resposta do backend (geralmente um status de sucesso).\r\n */export async function deleteFamilia(id){// Usa a nova rota de família completa para exclusão\nconst url=\"\".concat(API_BASE_URL,\"/familia/\").concat(id);try{const response=await makeAuthenticatedRequest(url,{method:'DELETE'});// O backend pode não retornar corpo para DELETE, apenas verificamos o status.\nif(!response.ok){// Tenta obter o corpo, se houver\nconst errorBody=await response.json().catch(()=>({error:'Nenhuma resposta detalhada.'}));throw new Error(\"Erro \".concat(response.status,\": \").concat(errorBody.error||'Falha ao excluir a família.'));}// Se a exclusão for bem-sucedida (ex: 200, 204), retornamos sucesso.\nreturn{success:true,message:\"Fam\\xEDlia com ID \".concat(id,\" exclu\\xEDda com sucesso.\")};}catch(error){console.error('Erro no serviço deleteFamilia:',error);throw error;}}// -------------------------------------------------------------------\n// Serviços para Monitor\n// -------------------------------------------------------------------\n/**\r\n * Cria um novo monitor (POST /api/dados/Monitor)\r\n * @param {Object} monitorData - { nome, telefone, email, observacao }\r\n */export async function createMonitor(monitorData){const url=\"\".concat(API_BASE_URL,\"/dados/Monitor\");try{const response=await makeAuthenticatedRequest(url,{method:'POST',body:JSON.stringify(monitorData)});if(!response.ok){const errorBody=await response.text().catch(()=>'Erro desconhecido');throw new Error(\"Erro \".concat(response.status,\": \").concat(errorBody));}return response.json();}catch(error){console.error('Erro no serviço createMonitor:',error);throw error;}}/**\r\n * Busca monitores (GET /api/dados/Monitor)\r\n */export async function getMonitors(){const url=\"\".concat(API_BASE_URL,\"/dados/Monitor\");try{const response=await fetch(url,{method:'GET',headers:getAuthHeaders()});if(!response.ok){const errorBody=await response.text().catch(()=>'Erro desconhecido');throw new Error(\"Erro \".concat(response.status,\": \").concat(errorBody));}return response.json();}catch(error){console.error('Erro no serviço getMonitors:',error);throw error;}}/**\r\n * Atualiza monitor (PUT /api/dados/Monitor/:id)\r\n */export async function updateMonitor(id,monitorData){const url=\"\".concat(API_BASE_URL,\"/dados/Monitor/\").concat(id);try{const response=await makeAuthenticatedRequest(url,{method:'PUT',body:JSON.stringify(monitorData)});if(!response.ok){const errorBody=await response.text().catch(()=>'Erro desconhecido');throw new Error(\"Erro \".concat(response.status,\": \").concat(errorBody));}return response.json();}catch(error){console.error('Erro no serviço updateMonitor:',error);throw error;}}/**\r\n * Deleta monitor (DELETE /api/dados/Monitor/:id)\r\n */export async function deleteMonitor(id){const url=\"\".concat(API_BASE_URL,\"/dados/Monitor/\").concat(id);try{const response=await makeAuthenticatedRequest(url,{method:'DELETE'});if(!response.ok){const errorBody=await response.text().catch(()=>'Erro desconhecido');throw new Error(\"Erro \".concat(response.status,\": \").concat(errorBody));}return{success:true};}catch(error){console.error('Erro no serviço deleteMonitor:',error);throw error;}}/**\r\n * Busca dados completos de uma família para edição\r\n * @param {string|number} id - ID da família\r\n * @returns {Object} Dados completos da família\r\n */export async function getFamiliaCompleta(id){const url=\"\".concat(API_BASE_URL,\"/familia/\").concat(id);try{const response=await fetch(url,{method:'GET',headers:getAuthHeaders()});if(!response.ok){const errorBody=await response.json().catch(()=>({message:'Erro desconhecido'}));throw new Error(\"Erro \".concat(response.status,\": \").concat(errorBody.message));}const result=await response.json();return result.data;}catch(error){console.error('Erro no serviço getFamiliaCompleta:',error);throw error;}}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","TABLE_NAME","getAuthHeaders","token","localStorage","getItem","_objectSpread","concat","makeAuthenticatedRequest","url","options","arguments","length","undefined","headers","response","fetch","status","refreshToken","refreshResponse","method","body","JSON","stringify","ok","data","json","setItem","tokens","accessToken","Authorization","removeItem","window","location","reload","Error","err","createFamilia","familiaData","errorMessage","errorBody","message","error","e","text","console","getFamilias","result","updateFamilia","id","deleteFamilia","catch","success","createMonitor","monitorData","getMonitors","updateMonitor","deleteMonitor","getFamiliaCompleta"],"sources":["/home/gustavodias/Downloads/CEPAS/src/services/cepasService.js"],"sourcesContent":["/**\r\n * cepasService.js\r\n * Funções para interagir com o Backend (API Node.js/Express) com autenticação.\r\n * Agora compatível com Docker e com funções CRUD completas.\r\n */\r\n\r\n// Define a URL base para chamadas de API.\r\n// Usa a variável de ambiente REACT_APP_API_BASE_URL (para Docker) ou volta para localhost (desenvolvimento).\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api'; \r\n// Define o nome da tabela que este serviço irá manipular\r\nconst TABLE_NAME = 'Familia'; \r\n\r\n// Função auxiliar para obter headers autenticados\r\nconst getAuthHeaders = () => {\r\n    const token = localStorage.getItem('accessToken');\r\n    return {\r\n        'Content-Type': 'application/json',\r\n        ...(token && { 'Authorization': `Bearer ${token}` })\r\n    };\r\n};\r\n\r\n// Função auxiliar para fazer requests autenticados com renovação automática de token\r\nconst makeAuthenticatedRequest = async (url, options = {}) => {\r\n    const headers = {\r\n        ...getAuthHeaders(),\r\n        ...options.headers\r\n    };\r\n\r\n    let response = await fetch(url, { ...options, headers });\r\n\r\n    // Se token expirou, tentar renovar\r\n    if (response.status === 401) {\r\n        const refreshToken = localStorage.getItem('refreshToken');\r\n        if (refreshToken) {\r\n            try {\r\n                const refreshResponse = await fetch(`${API_BASE_URL}/auth/refresh`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ refreshToken })\r\n                });\r\n\r\n                if (refreshResponse.ok) {\r\n                    const data = await refreshResponse.json();\r\n                    localStorage.setItem('accessToken', data.tokens.accessToken);\r\n                    localStorage.setItem('refreshToken', data.tokens.refreshToken);\r\n                    \r\n                    // Tentar novamente com o novo token\r\n                    headers.Authorization = `Bearer ${data.tokens.accessToken}`;\r\n                    response = await fetch(url, { ...options, headers });\r\n                } else {\r\n                    // Se não conseguiu renovar, redirecionar para login\r\n                    localStorage.removeItem('accessToken');\r\n                    localStorage.removeItem('refreshToken');\r\n                    window.location.reload();\r\n                    throw new Error('Sessão expirada');\r\n                }\r\n            } catch (err) {\r\n                localStorage.removeItem('accessToken');\r\n                localStorage.removeItem('refreshToken');\r\n                window.location.reload();\r\n                throw new Error('Sessão expirada');\r\n            }\r\n        } else {\r\n            throw new Error('Não autorizado');\r\n        }\r\n    }\r\n\r\n    return response;\r\n}; \r\n\r\n// -------------------------------------------------------------------\r\n// 1. FUNÇÃO DE CRIAÇÃO (POST) - Rota: POST /api/dados/Familia\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Envia um novo registro de família completo para o backend.\r\n * Inclui família, endereço, animal, estrutura e saneamento.\r\n * @param {Object} familiaData - Os dados completos da família a serem criados.\r\n * @returns {Object} O objeto de resposta do backend (com o novo ID, por exemplo).\r\n */\r\nexport async function createFamilia(familiaData) {\r\n    const url = `${API_BASE_URL}/familia-completa`; // Nova rota específica\r\n\r\n    try {\r\n        const response = await makeAuthenticatedRequest(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(familiaData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            let errorMessage = 'Falha ao cadastrar a família.';\r\n            try {\r\n                const errorBody = await response.json();\r\n                errorMessage = errorBody.message || errorBody.error || errorMessage;\r\n            } catch (e) {\r\n                // Se não conseguir fazer parse do JSON, usa o texto da resposta\r\n                errorMessage = await response.text() || errorMessage;\r\n            }\r\n            throw new Error(`Erro ${response.status}: ${errorMessage}`);\r\n        }\r\n\r\n        return response.json();\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço createFamilia:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n// -------------------------------------------------------------------\r\n// 2. FUNÇÃO DE CONSULTA (GET) - Rota: GET /api/dados/Familia\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Busca todos os registros de famílias no backend usando o endpoint otimizado.\r\n * @returns {Array<Object>} Uma lista de objetos de famílias.\r\n */\r\nexport async function getFamilias() {\r\n    const url = `${API_BASE_URL}/familias`; // Novo endpoint otimizado\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: getAuthHeaders()\r\n        });\r\n\r\n        if (!response.ok) {\r\n            let errorMessage = 'Falha ao buscar as famílias.';\r\n            try {\r\n                const errorBody = await response.json();\r\n                errorMessage = errorBody.message || errorBody.error || errorMessage;\r\n            } catch (e) {\r\n                errorMessage = await response.text() || errorMessage;\r\n            }\r\n            throw new Error(`Erro ${response.status}: ${errorMessage}`);\r\n        }\r\n        \r\n        const result = await response.json();\r\n        return result.data || []; // Retorna o array de dados\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço getFamilias:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n// 3. FUNÇÃO DE ATUALIZAÇÃO (PUT) - Rota: PUT /api/dados/Familia/:id\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Atualiza um registro de família existente.\r\n * @param {string | number} id - O ID da família a ser atualizada.\r\n * @param {Object} familiaData - Os dados da família a serem atualizados.\r\n * @returns {Object} O objeto de resposta do backend.\r\n */\r\nexport async function updateFamilia(id, familiaData) {\r\n    // Usa a nova rota de família completa para atualização\r\n    const url = `${API_BASE_URL}/familia/${id}`;\r\n\r\n    try {\r\n        const response = await makeAuthenticatedRequest(url, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(familiaData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorBody = await response.json();\r\n            throw new Error(`Erro ${response.status}: ${errorBody.error || 'Falha ao atualizar a família.'}`);\r\n        }\r\n\r\n        return response.json();\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço updateFamilia:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n// 4. FUNÇÃO DE EXCLUSÃO (DELETE) - Rota: DELETE /api/dados/Familia/:id\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Exclui um registro de família.\r\n * @param {string | number} id - O ID da família a ser excluída.\r\n * @returns {Object} O objeto de resposta do backend (geralmente um status de sucesso).\r\n */\r\nexport async function deleteFamilia(id) {\r\n    // Usa a nova rota de família completa para exclusão\r\n    const url = `${API_BASE_URL}/familia/${id}`;\r\n\r\n    try {\r\n        const response = await makeAuthenticatedRequest(url, {\r\n            method: 'DELETE'\r\n        });\r\n\r\n        // O backend pode não retornar corpo para DELETE, apenas verificamos o status.\r\n        if (!response.ok) {\r\n            // Tenta obter o corpo, se houver\r\n            const errorBody = await response.json().catch(() => ({ error: 'Nenhuma resposta detalhada.' }));\r\n            throw new Error(`Erro ${response.status}: ${errorBody.error || 'Falha ao excluir a família.'}`);\r\n        }\r\n\r\n        // Se a exclusão for bem-sucedida (ex: 200, 204), retornamos sucesso.\r\n        return { success: true, message: `Família com ID ${id} excluída com sucesso.` };\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço deleteFamilia:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n// Serviços para Monitor\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Cria um novo monitor (POST /api/dados/Monitor)\r\n * @param {Object} monitorData - { nome, telefone, email, observacao }\r\n */\r\nexport async function createMonitor(monitorData) {\r\n    const url = `${API_BASE_URL}/dados/Monitor`;\r\n    try {\r\n        const response = await makeAuthenticatedRequest(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(monitorData)\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorBody = await response.text().catch(() => 'Erro desconhecido');\r\n            throw new Error(`Erro ${response.status}: ${errorBody}`);\r\n        }\r\n\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Erro no serviço createMonitor:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Busca monitores (GET /api/dados/Monitor)\r\n */\r\nexport async function getMonitors() {\r\n    const url = `${API_BASE_URL}/dados/Monitor`;\r\n    try {\r\n        const response = await fetch(url, { \r\n            method: 'GET', \r\n            headers: getAuthHeaders() \r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const errorBody = await response.text().catch(() => 'Erro desconhecido');\r\n            throw new Error(`Erro ${response.status}: ${errorBody}`);\r\n        }\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Erro no serviço getMonitors:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Atualiza monitor (PUT /api/dados/Monitor/:id)\r\n */\r\nexport async function updateMonitor(id, monitorData) {\r\n    const url = `${API_BASE_URL}/dados/Monitor/${id}`;\r\n    try {\r\n        const response = await makeAuthenticatedRequest(url, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(monitorData)\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const errorBody = await response.text().catch(() => 'Erro desconhecido');\r\n            throw new Error(`Erro ${response.status}: ${errorBody}`);\r\n        }\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Erro no serviço updateMonitor:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Deleta monitor (DELETE /api/dados/Monitor/:id)\r\n */\r\nexport async function deleteMonitor(id) {\r\n    const url = `${API_BASE_URL}/dados/Monitor/${id}`;\r\n    try {\r\n        const response = await makeAuthenticatedRequest(url, { \r\n            method: 'DELETE' \r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const errorBody = await response.text().catch(() => 'Erro desconhecido');\r\n            throw new Error(`Erro ${response.status}: ${errorBody}`);\r\n        }\r\n        return { success: true };\r\n    } catch (error) {\r\n        console.error('Erro no serviço deleteMonitor:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Busca dados completos de uma família para edição\r\n * @param {string|number} id - ID da família\r\n * @returns {Object} Dados completos da família\r\n */\r\nexport async function getFamiliaCompleta(id) {\r\n    const url = `${API_BASE_URL}/familia/${id}`;\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: getAuthHeaders()\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorBody = await response.json().catch(() => ({ message: 'Erro desconhecido' }));\r\n            throw new Error(`Erro ${response.status}: ${errorBody.message}`);\r\n        }\r\n\r\n        const result = await response.json();\r\n        return result.data;\r\n    } catch (error) {\r\n        console.error('Erro no serviço getFamiliaCompleta:', error);\r\n        throw error;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}