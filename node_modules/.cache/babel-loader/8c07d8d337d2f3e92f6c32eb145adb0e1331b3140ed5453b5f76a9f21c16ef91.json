{"ast":null,"code":"/**\r\n * cepasService.js\r\n * Funções para interagir com o Backend (API Node.js/Express).\r\n * Agora compatível com Docker e com funções CRUD completas.\r\n */// Define a URL base para chamadas de API.\n// Usa a variável de ambiente REACT_APP_API_BASE_URL (para Docker) ou volta para localhost (desenvolvimento).\nconst API_BASE_URL=process.env.REACT_APP_API_BASE_URL||'http://localhost:3001/api';// Define o nome da tabela que este serviço irá manipular\nconst TABLE_NAME='Familia';// -------------------------------------------------------------------\n// 1. FUNÇÃO DE CRIAÇÃO (POST) - Rota: POST /api/dados/Familia\n// -------------------------------------------------------------------\n/**\r\n * Envia um novo registro de família completo para o backend.\r\n * Inclui família, endereço, animal, estrutura e saneamento.\r\n * @param {Object} familiaData - Os dados completos da família a serem criados.\r\n * @returns {Object} O objeto de resposta do backend (com o novo ID, por exemplo).\r\n */export async function createFamilia(familiaData){const url=\"\".concat(API_BASE_URL,\"/familia-completa\");// Nova rota específica\ntry{const response=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json','x-user':'usuario_sistema'// Header para auditoria\n},body:JSON.stringify(familiaData)});if(!response.ok){let errorMessage='Falha ao cadastrar a família.';try{const errorBody=await response.json();errorMessage=errorBody.message||errorBody.error||errorMessage;}catch(e){// Se não conseguir fazer parse do JSON, usa o texto da resposta\nerrorMessage=(await response.text())||errorMessage;}throw new Error(\"Erro \".concat(response.status,\": \").concat(errorMessage));}return response.json();}catch(error){console.error('Erro no serviço createFamilia:',error);throw error;}}// -------------------------------------------------------------------\n// 2. FUNÇÃO DE CONSULTA (GET) - Rota: GET /api/dados/Familia\n// -------------------------------------------------------------------\n/**\r\n * Busca todos os registros de famílias no backend usando o endpoint otimizado.\r\n * @returns {Array<Object>} Uma lista de objetos de famílias.\r\n */export async function getFamilias(){const url=\"\".concat(API_BASE_URL,\"/familias\");// Novo endpoint otimizado\ntry{const response=await fetch(url,{method:'GET',headers:{'Content-Type':'application/json','x-user':'usuario_sistema'}});if(!response.ok){let errorMessage='Falha ao buscar as famílias.';try{const errorBody=await response.json();errorMessage=errorBody.message||errorBody.error||errorMessage;}catch(e){errorMessage=(await response.text())||errorMessage;}throw new Error(\"Erro \".concat(response.status,\": \").concat(errorMessage));}const result=await response.json();return result.data||[];// Retorna o array de dados\n}catch(error){console.error('Erro no serviço getFamilias:',error);throw error;}}// -------------------------------------------------------------------\n// 3. FUNÇÃO DE ATUALIZAÇÃO (PUT) - Rota: PUT /api/dados/Familia/:id\n// -------------------------------------------------------------------\n/**\r\n * Atualiza um registro de família existente.\r\n * @param {string | number} id - O ID da família a ser atualizada.\r\n * @param {Object} familiaData - Os dados da família a serem atualizados.\r\n * @returns {Object} O objeto de resposta do backend.\r\n */export async function updateFamilia(id,familiaData){// Adiciona o ID ao final da URL\nconst url=\"\".concat(API_BASE_URL,\"/dados/\").concat(TABLE_NAME,\"/\").concat(id);try{const response=await fetch(url,{method:'PUT',// Usamos PUT para atualização completa\nheaders:{'Content-Type':'application/json'},body:JSON.stringify(familiaData)});if(!response.ok){const errorBody=await response.json();throw new Error(\"Erro \".concat(response.status,\": \").concat(errorBody.error||'Falha ao atualizar a família.'));}// Retorna o resultado da operação (pode ser um status OK ou o objeto atualizado)\nreturn response.json();}catch(error){console.error('Erro no serviço updateFamilia:',error);throw error;}}// -------------------------------------------------------------------\n// 4. FUNÇÃO DE EXCLUSÃO (DELETE) - Rota: DELETE /api/dados/Familia/:id\n// -------------------------------------------------------------------\n/**\r\n * Exclui um registro de família.\r\n * @param {string | number} id - O ID da família a ser excluída.\r\n * @returns {Object} O objeto de resposta do backend (geralmente um status de sucesso).\r\n */export async function deleteFamilia(id){// Adiciona o ID ao final da URL\nconst url=\"\".concat(API_BASE_URL,\"/dados/\").concat(TABLE_NAME,\"/\").concat(id);try{const response=await fetch(url,{method:'DELETE',headers:{'Content-Type':'application/json'// Necessário para alguns servidores\n}});// O backend pode não retornar corpo para DELETE, apenas verificamos o status.\nif(!response.ok){// Tenta obter o corpo, se houver\nconst errorBody=await response.json().catch(()=>({error:'Nenhuma resposta detalhada.'}));throw new Error(\"Erro \".concat(response.status,\": \").concat(errorBody.error||'Falha ao excluir a família.'));}// Se a exclusão for bem-sucedida (ex: 200, 204), retornamos sucesso.\nreturn{success:true,message:\"Fam\\xEDlia com ID \".concat(id,\" exclu\\xEDda com sucesso.\")};}catch(error){console.error('Erro no serviço deleteFamilia:',error);throw error;}}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","TABLE_NAME","createFamilia","familiaData","url","concat","response","fetch","method","headers","body","JSON","stringify","ok","errorMessage","errorBody","json","message","error","e","text","Error","status","console","getFamilias","result","data","updateFamilia","id","deleteFamilia","catch","success"],"sources":["C:/Users/JoaoPedro/Desktop/CEPAS/src/services/cepasService.js"],"sourcesContent":["/**\r\n * cepasService.js\r\n * Funções para interagir com o Backend (API Node.js/Express).\r\n * Agora compatível com Docker e com funções CRUD completas.\r\n */\r\n\r\n// Define a URL base para chamadas de API.\r\n// Usa a variável de ambiente REACT_APP_API_BASE_URL (para Docker) ou volta para localhost (desenvolvimento).\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api'; \r\n// Define o nome da tabela que este serviço irá manipular\r\nconst TABLE_NAME = 'Familia'; \r\n\r\n// -------------------------------------------------------------------\r\n// 1. FUNÇÃO DE CRIAÇÃO (POST) - Rota: POST /api/dados/Familia\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Envia um novo registro de família completo para o backend.\r\n * Inclui família, endereço, animal, estrutura e saneamento.\r\n * @param {Object} familiaData - Os dados completos da família a serem criados.\r\n * @returns {Object} O objeto de resposta do backend (com o novo ID, por exemplo).\r\n */\r\nexport async function createFamilia(familiaData) {\r\n    const url = `${API_BASE_URL}/familia-completa`; // Nova rota específica\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-user': 'usuario_sistema' // Header para auditoria\r\n            },\r\n            body: JSON.stringify(familiaData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            let errorMessage = 'Falha ao cadastrar a família.';\r\n            try {\r\n                const errorBody = await response.json();\r\n                errorMessage = errorBody.message || errorBody.error || errorMessage;\r\n            } catch (e) {\r\n                // Se não conseguir fazer parse do JSON, usa o texto da resposta\r\n                errorMessage = await response.text() || errorMessage;\r\n            }\r\n            throw new Error(`Erro ${response.status}: ${errorMessage}`);\r\n        }\r\n\r\n        return response.json();\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço createFamilia:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n// -------------------------------------------------------------------\r\n// 2. FUNÇÃO DE CONSULTA (GET) - Rota: GET /api/dados/Familia\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Busca todos os registros de famílias no backend usando o endpoint otimizado.\r\n * @returns {Array<Object>} Uma lista de objetos de famílias.\r\n */\r\nexport async function getFamilias() {\r\n    const url = `${API_BASE_URL}/familias`; // Novo endpoint otimizado\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-user': 'usuario_sistema'\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            let errorMessage = 'Falha ao buscar as famílias.';\r\n            try {\r\n                const errorBody = await response.json();\r\n                errorMessage = errorBody.message || errorBody.error || errorMessage;\r\n            } catch (e) {\r\n                errorMessage = await response.text() || errorMessage;\r\n            }\r\n            throw new Error(`Erro ${response.status}: ${errorMessage}`);\r\n        }\r\n        \r\n        const result = await response.json();\r\n        return result.data || []; // Retorna o array de dados\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço getFamilias:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n// 3. FUNÇÃO DE ATUALIZAÇÃO (PUT) - Rota: PUT /api/dados/Familia/:id\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Atualiza um registro de família existente.\r\n * @param {string | number} id - O ID da família a ser atualizada.\r\n * @param {Object} familiaData - Os dados da família a serem atualizados.\r\n * @returns {Object} O objeto de resposta do backend.\r\n */\r\nexport async function updateFamilia(id, familiaData) {\r\n    // Adiciona o ID ao final da URL\r\n    const url = `${API_BASE_URL}/dados/${TABLE_NAME}/${id}`;\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'PUT', // Usamos PUT para atualização completa\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(familiaData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorBody = await response.json();\r\n            throw new Error(`Erro ${response.status}: ${errorBody.error || 'Falha ao atualizar a família.'}`);\r\n        }\r\n\r\n        // Retorna o resultado da operação (pode ser um status OK ou o objeto atualizado)\r\n        return response.json();\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço updateFamilia:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n// 4. FUNÇÃO DE EXCLUSÃO (DELETE) - Rota: DELETE /api/dados/Familia/:id\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Exclui um registro de família.\r\n * @param {string | number} id - O ID da família a ser excluída.\r\n * @returns {Object} O objeto de resposta do backend (geralmente um status de sucesso).\r\n */\r\nexport async function deleteFamilia(id) {\r\n    // Adiciona o ID ao final da URL\r\n    const url = `${API_BASE_URL}/dados/${TABLE_NAME}/${id}`;\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json', // Necessário para alguns servidores\r\n            },\r\n        });\r\n\r\n        // O backend pode não retornar corpo para DELETE, apenas verificamos o status.\r\n        if (!response.ok) {\r\n            // Tenta obter o corpo, se houver\r\n            const errorBody = await response.json().catch(() => ({ error: 'Nenhuma resposta detalhada.' }));\r\n            throw new Error(`Erro ${response.status}: ${errorBody.error || 'Falha ao excluir a família.'}`);\r\n        }\r\n\r\n        // Se a exclusão for bem-sucedida (ex: 200, 204), retornamos sucesso.\r\n        return { success: true, message: `Família com ID ${id} excluída com sucesso.` };\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço deleteFamilia:', error);\r\n        throw error;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}