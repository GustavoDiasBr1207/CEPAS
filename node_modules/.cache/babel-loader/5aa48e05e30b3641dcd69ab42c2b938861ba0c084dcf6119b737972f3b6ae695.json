{"ast":null,"code":"import _objectSpread from\"/home/gustavodias/Downloads/CEPAS/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{hasPermission as systemHasPermission,canAccessRoute,getPermissionErrorMessage}from'../utils/permissions';// Configuração da API\nimport{jsx as _jsx}from\"react/jsx-runtime\";const API_BASE_URL=process.env.REACT_APP_API_BASE_URL||'http://localhost:3001/api';export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(true);const[token,setToken]=useState(localStorage.getItem('accessToken'));// Configurar interceptador para requests (retorna JSON quando disponível; caso contrário, texto)\nconst makeAuthenticatedRequest=async function(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const authToken=localStorage.getItem('accessToken');const headers=_objectSpread({'Content-Type':'application/json'},options.headers);if(authToken){headers.Authorization=\"Bearer \".concat(authToken);}else{throw new Error('Token de acesso requerido');}let response=await fetch(\"\".concat(API_BASE_URL).concat(url),_objectSpread(_objectSpread({},options),{},{headers}));// Se token expirou, tentar renovar\nif(response.status===401){const refreshed=await refreshToken();if(refreshed){// Tentar novamente com o novo token\nconst newToken=localStorage.getItem('accessToken');headers.Authorization=\"Bearer \".concat(newToken);const retryResponse=await fetch(\"\".concat(API_BASE_URL).concat(url),_objectSpread(_objectSpread({},options),{},{headers}));if(!retryResponse.ok){// tentar extrair mensagem de erro do corpo\nconst ct=retryResponse.headers.get('content-type')||'';if(ct.includes('application/json')){const errBody=await retryResponse.json().catch(()=>({}));throw new Error(errBody.message||\"Erro \".concat(retryResponse.status,\": \").concat(retryResponse.statusText));}else{const errText=await retryResponse.text().catch(()=>'');throw new Error(errText||\"Erro \".concat(retryResponse.status,\": \").concat(retryResponse.statusText));}}const ct=retryResponse.headers.get('content-type')||'';if(ct.includes('application/json')){return await retryResponse.json();}const text=await retryResponse.text();return{message:text};}else{// Se não conseguiu renovar, fazer logout\nlogout();throw new Error('Sessão expirada. Faça login novamente.');}}if(!response.ok){const ct=response.headers.get('content-type')||'';if(ct.includes('application/json')){const errBody=await response.json().catch(()=>({}));throw new Error(errBody.message||\"Erro \".concat(response.status,\": \").concat(response.statusText));}else{const errText=await response.text().catch(()=>'');throw new Error(errText||\"Erro \".concat(response.status,\": \").concat(response.statusText));}}// OK: retornar JSON quando possível; senão, texto\nconst contentType=response.headers.get('content-type')||'';if(contentType.includes('application/json')){return await response.json();}const text=await response.text();return{message:text};};// Verificar usuário logado ao carregar a aplicação\nuseEffect(()=>{const checkAuth=async()=>{const storedToken=localStorage.getItem('accessToken');if(storedToken){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/auth/me\"),{headers:{'Authorization':\"Bearer \".concat(storedToken),'Content-Type':'application/json'}});if(response.ok){const data=await response.json();setUser(data.user);setToken(storedToken);}else{// Token inválido, remover\nlocalStorage.removeItem('accessToken');localStorage.removeItem('refreshToken');}}catch(error){console.error('Erro ao verificar autenticação:',error);localStorage.removeItem('accessToken');localStorage.removeItem('refreshToken');}}setIsLoading(false);};checkAuth();},[]);// Função de login\nconst login=async(username,password)=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/auth/login\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,password})});const data=await response.json();if(!response.ok){throw new Error(data.message||'Erro ao fazer login');}// Armazenar tokens\nlocalStorage.setItem('accessToken',data.tokens.accessToken);localStorage.setItem('refreshToken',data.tokens.refreshToken);setUser(data.user);setToken(data.tokens.accessToken);return data;}catch(error){throw error;}};// Função de logout\nconst logout=async()=>{try{const refreshTokenValue=localStorage.getItem('refreshToken');const accessToken=localStorage.getItem('accessToken');if(refreshTokenValue&&accessToken){// Fazer logout no servidor sem usar makeAuthenticatedRequest para evitar loop\nawait fetch(\"\".concat(API_BASE_URL,\"/auth/logout\"),{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(accessToken)},body:JSON.stringify({refreshToken:refreshTokenValue})});}}catch(error){console.error('Erro ao fazer logout:',error);}finally{// Limpar dados locais independentemente do resultado\nlocalStorage.removeItem('accessToken');localStorage.removeItem('refreshToken');setUser(null);setToken(null);}};// Função para renovar token\nconst refreshToken=async()=>{try{const storedRefreshToken=localStorage.getItem('refreshToken');if(!storedRefreshToken){return false;}const response=await fetch(\"\".concat(API_BASE_URL,\"/auth/refresh\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({refreshToken:storedRefreshToken})});if(response.ok){const data=await response.json();localStorage.setItem('accessToken',data.tokens.accessToken);localStorage.setItem('refreshToken',data.tokens.refreshToken);setToken(data.tokens.accessToken);return true;}else{return false;}}catch(error){console.error('Erro ao renovar token:',error);return false;}};// Verificar se usuário tem permissão por roles simples\nconst hasPermission=requiredRoles=>{if(!user)return false;if(Array.isArray(requiredRoles)){return requiredRoles.includes(user.tipo_usuario);}return user.tipo_usuario===requiredRoles;};const value={user,token,isLoading,login,logout,makeAuthenticatedRequest,hasPermission,isAuthenticated:!!user,isAdmin:(user===null||user===void 0?void 0:user.tipo_usuario)==='admin',isCoordenador:(user===null||user===void 0?void 0:user.tipo_usuario)==='coordenador',isMonitor:(user===null||user===void 0?void 0:user.tipo_usuario)==='monitor',isVisualizador:(user===null||user===void 0?void 0:user.tipo_usuario)==='visualizador',// Novos utilitários de permissão usando o sistema atualizado\n// Permissões de sistema baseadas em regras externas\nhasSystemPermission:(action,resource)=>systemHasPermission(user,action,resource),canAccessRoute:route=>canAccessRoute(user,route),getPermissionErrorMessage:(action,resource)=>getPermissionErrorMessage(user,action,resource),// Helper para verificar se é admin com poder máximo\nisMaxAdmin:()=>(user===null||user===void 0?void 0:user.tipo_usuario)==='admin'||(user===null||user===void 0?void 0:user.role)==='admin'};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","hasPermission","systemHasPermission","canAccessRoute","getPermissionErrorMessage","jsx","_jsx","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","AuthContext","AuthProvider","_ref","children","user","setUser","isLoading","setIsLoading","token","setToken","localStorage","getItem","makeAuthenticatedRequest","url","options","arguments","length","undefined","authToken","headers","_objectSpread","Authorization","concat","Error","response","fetch","status","refreshed","refreshToken","newToken","retryResponse","ok","ct","get","includes","errBody","json","catch","message","statusText","errText","text","logout","contentType","checkAuth","storedToken","data","removeItem","error","console","login","username","password","method","body","JSON","stringify","setItem","tokens","accessToken","refreshTokenValue","storedRefreshToken","requiredRoles","Array","isArray","tipo_usuario","value","isAuthenticated","isAdmin","isCoordenador","isMonitor","isVisualizador","hasSystemPermission","action","resource","route","isMaxAdmin","role","Provider"],"sources":["/home/gustavodias/Downloads/CEPAS/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { hasPermission as systemHasPermission, canAccessRoute, getPermissionErrorMessage } from '../utils/permissions';\r\n\r\n// Configuração da API\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [token, setToken] = useState(localStorage.getItem('accessToken'));\r\n\r\n    // Configurar interceptador para requests (retorna JSON quando disponível; caso contrário, texto)\r\n    const makeAuthenticatedRequest = async (url, options = {}) => {\r\n        const authToken = localStorage.getItem('accessToken');\r\n        \r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers,\r\n        };\r\n\r\n        if (authToken) {\r\n            headers.Authorization = `Bearer ${authToken}`;\r\n        } else {\r\n            throw new Error('Token de acesso requerido');\r\n        }\r\n\r\n        let response = await fetch(`${API_BASE_URL}${url}`, {\r\n            ...options,\r\n            headers,\r\n        });\r\n\r\n        // Se token expirou, tentar renovar\r\n        if (response.status === 401) {\r\n            const refreshed = await refreshToken();\r\n            if (refreshed) {\r\n                // Tentar novamente com o novo token\r\n                const newToken = localStorage.getItem('accessToken');\r\n                headers.Authorization = `Bearer ${newToken}`;\r\n                const retryResponse = await fetch(`${API_BASE_URL}${url}`, {\r\n                    ...options,\r\n                    headers,\r\n                });\r\n                \r\n                if (!retryResponse.ok) {\r\n                    // tentar extrair mensagem de erro do corpo\r\n                    const ct = retryResponse.headers.get('content-type') || '';\r\n                    if (ct.includes('application/json')) {\r\n                        const errBody = await retryResponse.json().catch(() => ({}));\r\n                        throw new Error(errBody.message || `Erro ${retryResponse.status}: ${retryResponse.statusText}`);\r\n                    } else {\r\n                        const errText = await retryResponse.text().catch(() => '');\r\n                        throw new Error(errText || `Erro ${retryResponse.status}: ${retryResponse.statusText}`);\r\n                    }\r\n                }\r\n                \r\n                const ct = retryResponse.headers.get('content-type') || '';\r\n                if (ct.includes('application/json')) {\r\n                    return await retryResponse.json();\r\n                }\r\n                const text = await retryResponse.text();\r\n                return { message: text };\r\n            } else {\r\n                // Se não conseguiu renovar, fazer logout\r\n                logout();\r\n                throw new Error('Sessão expirada. Faça login novamente.');\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            const ct = response.headers.get('content-type') || '';\r\n            if (ct.includes('application/json')) {\r\n                const errBody = await response.json().catch(() => ({}));\r\n                throw new Error(errBody.message || `Erro ${response.status}: ${response.statusText}`);\r\n            } else {\r\n                const errText = await response.text().catch(() => '');\r\n                throw new Error(errText || `Erro ${response.status}: ${response.statusText}`);\r\n            }\r\n        }\r\n\r\n        // OK: retornar JSON quando possível; senão, texto\r\n        const contentType = response.headers.get('content-type') || '';\r\n        if (contentType.includes('application/json')) {\r\n            return await response.json();\r\n        }\r\n        const text = await response.text();\r\n        return { message: text };\r\n    };\r\n\r\n    // Verificar usuário logado ao carregar a aplicação\r\n    useEffect(() => {\r\n        const checkAuth = async () => {\r\n            const storedToken = localStorage.getItem('accessToken');\r\n            \r\n            if (storedToken) {\r\n                try {\r\n                    const response = await fetch(`${API_BASE_URL}/auth/me`, {\r\n                        headers: {\r\n                            'Authorization': `Bearer ${storedToken}`,\r\n                            'Content-Type': 'application/json'\r\n                        }\r\n                    });\r\n                    \r\n                    if (response.ok) {\r\n                        const data = await response.json();\r\n                        setUser(data.user);\r\n                        setToken(storedToken);\r\n                    } else {\r\n                        // Token inválido, remover\r\n                        localStorage.removeItem('accessToken');\r\n                        localStorage.removeItem('refreshToken');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Erro ao verificar autenticação:', error);\r\n                    localStorage.removeItem('accessToken');\r\n                    localStorage.removeItem('refreshToken');\r\n                }\r\n            }\r\n            \r\n            setIsLoading(false);\r\n        };\r\n\r\n        checkAuth();\r\n    }, []);\r\n\r\n    // Função de login\r\n    const login = async (username, password) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Erro ao fazer login');\r\n            }\r\n\r\n            // Armazenar tokens\r\n            localStorage.setItem('accessToken', data.tokens.accessToken);\r\n            localStorage.setItem('refreshToken', data.tokens.refreshToken);\r\n            \r\n            setUser(data.user);\r\n            setToken(data.tokens.accessToken);\r\n\r\n            return data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    // Função de logout\r\n    const logout = async () => {\r\n        try {\r\n            const refreshTokenValue = localStorage.getItem('refreshToken');\r\n            const accessToken = localStorage.getItem('accessToken');\r\n            \r\n            if (refreshTokenValue && accessToken) {\r\n                // Fazer logout no servidor sem usar makeAuthenticatedRequest para evitar loop\r\n                await fetch(`${API_BASE_URL}/auth/logout`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${accessToken}`\r\n                    },\r\n                    body: JSON.stringify({ refreshToken: refreshTokenValue }),\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error('Erro ao fazer logout:', error);\r\n        } finally {\r\n            // Limpar dados locais independentemente do resultado\r\n            localStorage.removeItem('accessToken');\r\n            localStorage.removeItem('refreshToken');\r\n            setUser(null);\r\n            setToken(null);\r\n        }\r\n    };\r\n\r\n    // Função para renovar token\r\n    const refreshToken = async () => {\r\n        try {\r\n            const storedRefreshToken = localStorage.getItem('refreshToken');\r\n            \r\n            if (!storedRefreshToken) {\r\n                return false;\r\n            }\r\n\r\n            const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ refreshToken: storedRefreshToken }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                localStorage.setItem('accessToken', data.tokens.accessToken);\r\n                localStorage.setItem('refreshToken', data.tokens.refreshToken);\r\n                setToken(data.tokens.accessToken);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.error('Erro ao renovar token:', error);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    // Verificar se usuário tem permissão por roles simples\r\n    const hasPermission = (requiredRoles) => {\r\n        if (!user) return false;\r\n        \r\n        if (Array.isArray(requiredRoles)) {\r\n            return requiredRoles.includes(user.tipo_usuario);\r\n        }\r\n        \r\n        return user.tipo_usuario === requiredRoles;\r\n    };\r\n\r\n    const value = {\r\n        user,\r\n        token,\r\n        isLoading,\r\n        login,\r\n        logout,\r\n        makeAuthenticatedRequest,\r\n        hasPermission,\r\n        isAuthenticated: !!user,\r\n        isAdmin: user?.tipo_usuario === 'admin',\r\n        isCoordenador: user?.tipo_usuario === 'coordenador',\r\n        isMonitor: user?.tipo_usuario === 'monitor',\r\n        isVisualizador: user?.tipo_usuario === 'visualizador',\r\n        // Novos utilitários de permissão usando o sistema atualizado\r\n    // Permissões de sistema baseadas em regras externas\r\n    hasSystemPermission: (action, resource) => systemHasPermission(user, action, resource),\r\n    canAccessRoute: (route) => canAccessRoute(user, route),\r\n    getPermissionErrorMessage: (action, resource) => getPermissionErrorMessage(user, action, resource),\r\n        // Helper para verificar se é admin com poder máximo\r\n        isMaxAdmin: () => user?.tipo_usuario === 'admin' || user?.role === 'admin'\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}