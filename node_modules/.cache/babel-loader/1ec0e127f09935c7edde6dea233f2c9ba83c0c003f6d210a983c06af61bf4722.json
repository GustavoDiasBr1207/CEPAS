{"ast":null,"code":"/**\r\n * cepasService.js\r\n * Funções para interagir com o Backend (API Node.js/Express) com autenticação.\r\n * Agora compatível com Docker e com funções CRUD completas.\r\n */\n\n// Define a URL base para chamadas de API.\n// Usa a variável de ambiente REACT_APP_API_BASE_URL (para Docker) ou volta para localhost (desenvolvimento).\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api';\n// Define o nome da tabela que este serviço irá manipular\nconst TABLE_NAME = 'Familia';\n\n// Função auxiliar para obter headers autenticados\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('accessToken');\n  return {\n    'Content-Type': 'application/json',\n    ...(token && {\n      'Authorization': `Bearer ${token}`\n    })\n  };\n};\n\n// Função auxiliar para fazer requests autenticados com renovação automática de token\nconst makeAuthenticatedRequest = async (url, options = {}) => {\n  const headers = {\n    ...getAuthHeaders(),\n    ...options.headers\n  };\n  let response = await fetch(url, {\n    ...options,\n    headers\n  });\n\n  // Se token expirou, tentar renovar\n  if (response.status === 401) {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (refreshToken) {\n      try {\n        const refreshResponse = await fetch(`${API_BASE_URL}/auth/refresh`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            refreshToken\n          })\n        });\n        if (refreshResponse.ok) {\n          const data = await refreshResponse.json();\n          localStorage.setItem('accessToken', data.tokens.accessToken);\n          localStorage.setItem('refreshToken', data.tokens.refreshToken);\n\n          // Tentar novamente com o novo token\n          headers.Authorization = `Bearer ${data.tokens.accessToken}`;\n          response = await fetch(url, {\n            ...options,\n            headers\n          });\n        } else {\n          // Se não conseguiu renovar, redirecionar para login\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n          window.location.reload();\n          throw new Error('Sessão expirada');\n        }\n      } catch (err) {\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        window.location.reload();\n        throw new Error('Sessão expirada');\n      }\n    } else {\n      throw new Error('Não autorizado');\n    }\n  }\n  return response;\n};\n\n// -------------------------------------------------------------------\n// 1. FUNÇÃO DE CRIAÇÃO (POST) - Rota: POST /api/dados/Familia\n// -------------------------------------------------------------------\n\n/**\r\n * Envia um novo registro de família completo para o backend.\r\n * Inclui família, endereço, animal, estrutura e saneamento.\r\n * @param {Object} familiaData - Os dados completos da família a serem criados.\r\n * @returns {Object} O objeto de resposta do backend (com o novo ID, por exemplo).\r\n */\nexport async function createFamilia(familiaData) {\n  const url = `${API_BASE_URL}/familia-completa`; // Nova rota específica\n\n  try {\n    const response = await makeAuthenticatedRequest(url, {\n      method: 'POST',\n      body: JSON.stringify(familiaData)\n    });\n    if (!response.ok) {\n      let errorMessage = 'Falha ao cadastrar a família.';\n      try {\n        const errorBody = await response.json();\n        errorMessage = errorBody.message || errorBody.error || errorMessage;\n      } catch (e) {\n        // Se não conseguir fazer parse do JSON, usa o texto da resposta\n        errorMessage = (await response.text()) || errorMessage;\n      }\n      throw new Error(`Erro ${response.status}: ${errorMessage}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Erro no serviço createFamilia:', error);\n    throw error;\n  }\n}\n\n// -------------------------------------------------------------------\n// 2. FUNÇÃO DE CONSULTA (GET) - Rota: GET /api/dados/Familia\n// -------------------------------------------------------------------\n\n/**\r\n * Busca todos os registros de famílias no backend usando o endpoint otimizado.\r\n * @returns {Array<Object>} Uma lista de objetos de famílias.\r\n */\nexport async function getFamilias() {\n  const url = `${API_BASE_URL}/familias`; // Novo endpoint otimizado\n\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      let errorMessage = 'Falha ao buscar as famílias.';\n      try {\n        const errorBody = await response.json();\n        errorMessage = errorBody.message || errorBody.error || errorMessage;\n      } catch (e) {\n        errorMessage = (await response.text()) || errorMessage;\n      }\n      throw new Error(`Erro ${response.status}: ${errorMessage}`);\n    }\n    const result = await response.json();\n    return result.data || []; // Retorna o array de dados\n  } catch (error) {\n    console.error('Erro no serviço getFamilias:', error);\n    throw error;\n  }\n}\n\n// -------------------------------------------------------------------\n// 3. FUNÇÃO DE ATUALIZAÇÃO (PUT) - Rota: PUT /api/dados/Familia/:id\n// -------------------------------------------------------------------\n\n/**\r\n * Atualiza um registro de família existente.\r\n * @param {string | number} id - O ID da família a ser atualizada.\r\n * @param {Object} familiaData - Os dados da família a serem atualizados.\r\n * @returns {Object} O objeto de resposta do backend.\r\n */\nexport async function updateFamilia(id, familiaData) {\n  // Usa a nova rota de família completa para atualização\n  const url = `${API_BASE_URL}/familia/${id}`;\n  try {\n    const response = await makeAuthenticatedRequest(url, {\n      method: 'PUT',\n      body: JSON.stringify(familiaData)\n    });\n    if (!response.ok) {\n      const errorBody = await response.json();\n      throw new Error(`Erro ${response.status}: ${errorBody.error || 'Falha ao atualizar a família.'}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Erro no serviço updateFamilia:', error);\n    throw error;\n  }\n}\n\n// -------------------------------------------------------------------\n// 4. FUNÇÃO DE EXCLUSÃO (DELETE) - Rota: DELETE /api/dados/Familia/:id\n// -------------------------------------------------------------------\n\n/**\r\n * Exclui um registro de família.\r\n * @param {string | number} id - O ID da família a ser excluída.\r\n * @returns {Object} O objeto de resposta do backend (geralmente um status de sucesso).\r\n */\nexport async function deleteFamilia(id) {\n  // Usa a nova rota de família completa para exclusão\n  const url = `${API_BASE_URL}/familia/${id}`;\n  try {\n    const response = await makeAuthenticatedRequest(url, {\n      method: 'DELETE'\n    });\n\n    // O backend pode não retornar corpo para DELETE, apenas verificamos o status.\n    if (!response.ok) {\n      // Tenta obter o corpo, se houver\n      const errorBody = await response.json().catch(() => ({\n        error: 'Nenhuma resposta detalhada.'\n      }));\n      throw new Error(`Erro ${response.status}: ${errorBody.error || 'Falha ao excluir a família.'}`);\n    }\n\n    // Se a exclusão for bem-sucedida (ex: 200, 204), retornamos sucesso.\n    return {\n      success: true,\n      message: `Família com ID ${id} excluída com sucesso.`\n    };\n  } catch (error) {\n    console.error('Erro no serviço deleteFamilia:', error);\n    throw error;\n  }\n}\n\n// -------------------------------------------------------------------\n// Serviços para Monitor\n// -------------------------------------------------------------------\n\n/**\r\n * Cria um novo monitor (POST /api/dados/Monitor)\r\n * @param {Object} monitorData - { nome, telefone, email, observacao }\r\n */\nexport async function createMonitor(monitorData) {\n  const url = `${API_BASE_URL}/dados/Monitor`;\n  try {\n    const response = await makeAuthenticatedRequest(url, {\n      method: 'POST',\n      body: JSON.stringify(monitorData)\n    });\n    if (!response.ok) {\n      const errorBody = await response.text().catch(() => 'Erro desconhecido');\n      throw new Error(`Erro ${response.status}: ${errorBody}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Erro no serviço createMonitor:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Busca monitores (GET /api/dados/Monitor)\r\n */\nexport async function getMonitors() {\n  const url = `${API_BASE_URL}/dados/Monitor`;\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      const errorBody = await response.text().catch(() => 'Erro desconhecido');\n      throw new Error(`Erro ${response.status}: ${errorBody}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Erro no serviço getMonitors:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Atualiza monitor (PUT /api/dados/Monitor/:id)\r\n */\nexport async function updateMonitor(id, monitorData) {\n  const url = `${API_BASE_URL}/dados/Monitor/${id}`;\n  try {\n    const response = await makeAuthenticatedRequest(url, {\n      method: 'PUT',\n      body: JSON.stringify(monitorData)\n    });\n    if (!response.ok) {\n      const errorBody = await response.text().catch(() => 'Erro desconhecido');\n      throw new Error(`Erro ${response.status}: ${errorBody}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Erro no serviço updateMonitor:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Deleta monitor (DELETE /api/dados/Monitor/:id)\r\n */\nexport async function deleteMonitor(id) {\n  const url = `${API_BASE_URL}/dados/Monitor/${id}`;\n  try {\n    const response = await makeAuthenticatedRequest(url, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      const errorBody = await response.text().catch(() => 'Erro desconhecido');\n      throw new Error(`Erro ${response.status}: ${errorBody}`);\n    }\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Erro no serviço deleteMonitor:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Busca dados completos de uma família para edição\r\n * @param {string|number} id - ID da família\r\n * @returns {Object} Dados completos da família\r\n */\nexport async function getFamiliaCompleta(id) {\n  const url = `${API_BASE_URL}/familia/${id}`;\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      const errorBody = await response.json().catch(() => ({\n        message: 'Erro desconhecido'\n      }));\n      throw new Error(`Erro ${response.status}: ${errorBody.message}`);\n    }\n    const result = await response.json();\n    return result.data;\n  } catch (error) {\n    console.error('Erro no serviço getFamiliaCompleta:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","TABLE_NAME","getAuthHeaders","token","localStorage","getItem","makeAuthenticatedRequest","url","options","headers","response","fetch","status","refreshToken","refreshResponse","method","body","JSON","stringify","ok","data","json","setItem","tokens","accessToken","Authorization","removeItem","window","location","reload","Error","err","createFamilia","familiaData","errorMessage","errorBody","message","error","e","text","console","getFamilias","result","updateFamilia","id","deleteFamilia","catch","success","createMonitor","monitorData","getMonitors","updateMonitor","deleteMonitor","getFamiliaCompleta"],"sources":["C:/Users/gusta/OneDrive/Área de Trabalho/CEPAS/src/services/cepasService.js"],"sourcesContent":["/**\r\n * cepasService.js\r\n * Funções para interagir com o Backend (API Node.js/Express) com autenticação.\r\n * Agora compatível com Docker e com funções CRUD completas.\r\n */\r\n\r\n// Define a URL base para chamadas de API.\r\n// Usa a variável de ambiente REACT_APP_API_BASE_URL (para Docker) ou volta para localhost (desenvolvimento).\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api'; \r\n// Define o nome da tabela que este serviço irá manipular\r\nconst TABLE_NAME = 'Familia'; \r\n\r\n// Função auxiliar para obter headers autenticados\r\nconst getAuthHeaders = () => {\r\n    const token = localStorage.getItem('accessToken');\r\n    return {\r\n        'Content-Type': 'application/json',\r\n        ...(token && { 'Authorization': `Bearer ${token}` })\r\n    };\r\n};\r\n\r\n// Função auxiliar para fazer requests autenticados com renovação automática de token\r\nconst makeAuthenticatedRequest = async (url, options = {}) => {\r\n    const headers = {\r\n        ...getAuthHeaders(),\r\n        ...options.headers\r\n    };\r\n\r\n    let response = await fetch(url, { ...options, headers });\r\n\r\n    // Se token expirou, tentar renovar\r\n    if (response.status === 401) {\r\n        const refreshToken = localStorage.getItem('refreshToken');\r\n        if (refreshToken) {\r\n            try {\r\n                const refreshResponse = await fetch(`${API_BASE_URL}/auth/refresh`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ refreshToken })\r\n                });\r\n\r\n                if (refreshResponse.ok) {\r\n                    const data = await refreshResponse.json();\r\n                    localStorage.setItem('accessToken', data.tokens.accessToken);\r\n                    localStorage.setItem('refreshToken', data.tokens.refreshToken);\r\n                    \r\n                    // Tentar novamente com o novo token\r\n                    headers.Authorization = `Bearer ${data.tokens.accessToken}`;\r\n                    response = await fetch(url, { ...options, headers });\r\n                } else {\r\n                    // Se não conseguiu renovar, redirecionar para login\r\n                    localStorage.removeItem('accessToken');\r\n                    localStorage.removeItem('refreshToken');\r\n                    window.location.reload();\r\n                    throw new Error('Sessão expirada');\r\n                }\r\n            } catch (err) {\r\n                localStorage.removeItem('accessToken');\r\n                localStorage.removeItem('refreshToken');\r\n                window.location.reload();\r\n                throw new Error('Sessão expirada');\r\n            }\r\n        } else {\r\n            throw new Error('Não autorizado');\r\n        }\r\n    }\r\n\r\n    return response;\r\n}; \r\n\r\n// -------------------------------------------------------------------\r\n// 1. FUNÇÃO DE CRIAÇÃO (POST) - Rota: POST /api/dados/Familia\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Envia um novo registro de família completo para o backend.\r\n * Inclui família, endereço, animal, estrutura e saneamento.\r\n * @param {Object} familiaData - Os dados completos da família a serem criados.\r\n * @returns {Object} O objeto de resposta do backend (com o novo ID, por exemplo).\r\n */\r\nexport async function createFamilia(familiaData) {\r\n    const url = `${API_BASE_URL}/familia-completa`; // Nova rota específica\r\n\r\n    try {\r\n        const response = await makeAuthenticatedRequest(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(familiaData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            let errorMessage = 'Falha ao cadastrar a família.';\r\n            try {\r\n                const errorBody = await response.json();\r\n                errorMessage = errorBody.message || errorBody.error || errorMessage;\r\n            } catch (e) {\r\n                // Se não conseguir fazer parse do JSON, usa o texto da resposta\r\n                errorMessage = await response.text() || errorMessage;\r\n            }\r\n            throw new Error(`Erro ${response.status}: ${errorMessage}`);\r\n        }\r\n\r\n        return response.json();\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço createFamilia:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n// -------------------------------------------------------------------\r\n// 2. FUNÇÃO DE CONSULTA (GET) - Rota: GET /api/dados/Familia\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Busca todos os registros de famílias no backend usando o endpoint otimizado.\r\n * @returns {Array<Object>} Uma lista de objetos de famílias.\r\n */\r\nexport async function getFamilias() {\r\n    const url = `${API_BASE_URL}/familias`; // Novo endpoint otimizado\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: getAuthHeaders()\r\n        });\r\n\r\n        if (!response.ok) {\r\n            let errorMessage = 'Falha ao buscar as famílias.';\r\n            try {\r\n                const errorBody = await response.json();\r\n                errorMessage = errorBody.message || errorBody.error || errorMessage;\r\n            } catch (e) {\r\n                errorMessage = await response.text() || errorMessage;\r\n            }\r\n            throw new Error(`Erro ${response.status}: ${errorMessage}`);\r\n        }\r\n        \r\n        const result = await response.json();\r\n        return result.data || []; // Retorna o array de dados\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço getFamilias:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n// 3. FUNÇÃO DE ATUALIZAÇÃO (PUT) - Rota: PUT /api/dados/Familia/:id\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Atualiza um registro de família existente.\r\n * @param {string | number} id - O ID da família a ser atualizada.\r\n * @param {Object} familiaData - Os dados da família a serem atualizados.\r\n * @returns {Object} O objeto de resposta do backend.\r\n */\r\nexport async function updateFamilia(id, familiaData) {\r\n    // Usa a nova rota de família completa para atualização\r\n    const url = `${API_BASE_URL}/familia/${id}`;\r\n\r\n    try {\r\n        const response = await makeAuthenticatedRequest(url, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(familiaData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorBody = await response.json();\r\n            throw new Error(`Erro ${response.status}: ${errorBody.error || 'Falha ao atualizar a família.'}`);\r\n        }\r\n\r\n        return response.json();\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço updateFamilia:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n// 4. FUNÇÃO DE EXCLUSÃO (DELETE) - Rota: DELETE /api/dados/Familia/:id\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Exclui um registro de família.\r\n * @param {string | number} id - O ID da família a ser excluída.\r\n * @returns {Object} O objeto de resposta do backend (geralmente um status de sucesso).\r\n */\r\nexport async function deleteFamilia(id) {\r\n    // Usa a nova rota de família completa para exclusão\r\n    const url = `${API_BASE_URL}/familia/${id}`;\r\n\r\n    try {\r\n        const response = await makeAuthenticatedRequest(url, {\r\n            method: 'DELETE'\r\n        });\r\n\r\n        // O backend pode não retornar corpo para DELETE, apenas verificamos o status.\r\n        if (!response.ok) {\r\n            // Tenta obter o corpo, se houver\r\n            const errorBody = await response.json().catch(() => ({ error: 'Nenhuma resposta detalhada.' }));\r\n            throw new Error(`Erro ${response.status}: ${errorBody.error || 'Falha ao excluir a família.'}`);\r\n        }\r\n\r\n        // Se a exclusão for bem-sucedida (ex: 200, 204), retornamos sucesso.\r\n        return { success: true, message: `Família com ID ${id} excluída com sucesso.` };\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço deleteFamilia:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n// Serviços para Monitor\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Cria um novo monitor (POST /api/dados/Monitor)\r\n * @param {Object} monitorData - { nome, telefone, email, observacao }\r\n */\r\nexport async function createMonitor(monitorData) {\r\n    const url = `${API_BASE_URL}/dados/Monitor`;\r\n    try {\r\n        const response = await makeAuthenticatedRequest(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(monitorData)\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorBody = await response.text().catch(() => 'Erro desconhecido');\r\n            throw new Error(`Erro ${response.status}: ${errorBody}`);\r\n        }\r\n\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Erro no serviço createMonitor:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Busca monitores (GET /api/dados/Monitor)\r\n */\r\nexport async function getMonitors() {\r\n    const url = `${API_BASE_URL}/dados/Monitor`;\r\n    try {\r\n        const response = await fetch(url, { \r\n            method: 'GET', \r\n            headers: getAuthHeaders() \r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const errorBody = await response.text().catch(() => 'Erro desconhecido');\r\n            throw new Error(`Erro ${response.status}: ${errorBody}`);\r\n        }\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Erro no serviço getMonitors:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Atualiza monitor (PUT /api/dados/Monitor/:id)\r\n */\r\nexport async function updateMonitor(id, monitorData) {\r\n    const url = `${API_BASE_URL}/dados/Monitor/${id}`;\r\n    try {\r\n        const response = await makeAuthenticatedRequest(url, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(monitorData)\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const errorBody = await response.text().catch(() => 'Erro desconhecido');\r\n            throw new Error(`Erro ${response.status}: ${errorBody}`);\r\n        }\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Erro no serviço updateMonitor:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Deleta monitor (DELETE /api/dados/Monitor/:id)\r\n */\r\nexport async function deleteMonitor(id) {\r\n    const url = `${API_BASE_URL}/dados/Monitor/${id}`;\r\n    try {\r\n        const response = await makeAuthenticatedRequest(url, { \r\n            method: 'DELETE' \r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const errorBody = await response.text().catch(() => 'Erro desconhecido');\r\n            throw new Error(`Erro ${response.status}: ${errorBody}`);\r\n        }\r\n        return { success: true };\r\n    } catch (error) {\r\n        console.error('Erro no serviço deleteMonitor:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Busca dados completos de uma família para edição\r\n * @param {string|number} id - ID da família\r\n * @returns {Object} Dados completos da família\r\n */\r\nexport async function getFamiliaCompleta(id) {\r\n    const url = `${API_BASE_URL}/familia/${id}`;\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: getAuthHeaders()\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorBody = await response.json().catch(() => ({ message: 'Erro desconhecido' }));\r\n            throw new Error(`Erro ${response.status}: ${errorBody.message}`);\r\n        }\r\n\r\n        const result = await response.json();\r\n        return result.data;\r\n    } catch (error) {\r\n        console.error('Erro no serviço getFamiliaCompleta:', error);\r\n        throw error;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}