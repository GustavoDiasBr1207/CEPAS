{"ast":null,"code":"// src/config/adminAccess.js\n// Configura√ß√£o especial para garantir acesso total de administradores\n\n/**\r\n * Configura√ß√£o de acesso administrativo\r\n * ADMINS t√™m poder M√ÅXIMO e podem fazer TUDO no sistema\r\n */\nexport const ADMIN_ACCESS_CONFIG = {\n  // Lista de usu√°rios que sempre t√™m acesso total (al√©m dos admins)\n  SUPER_USERS: ['admin', 'administrador', 'root', 'super_admin'],\n  // Rotas que SEMPRE est√£o dispon√≠veis para admins\n  ADMIN_ALWAYS_ALLOWED_ROUTES: ['/cadastro-familia', '/cadastro-monitor', '/lista-familias', '/lista-monitores', '/editar-familia', '/consulta', '/consulta-geral', '/admin', '/configuracoes', '/usuarios', '/relatorios'],\n  // A√ß√µes que admins SEMPRE podem fazer\n  ADMIN_ALWAYS_ALLOWED_ACTIONS: ['read', 'write', 'update', 'delete', 'create', 'manage', 'configure', 'admin'],\n  // Recursos que admins SEMPRE podem gerenciar\n  ADMIN_ALWAYS_ALLOWED_RESOURCES: ['familias', 'monitores', 'usuarios', 'entrevistas', 'cadastros', 'relatorios', 'configuracoes', 'sistema', 'dados']\n};\n\n/**\r\n * Verifica se um usu√°rio √© um super admin com acesso total\r\n * @param {Object} user - Dados do usu√°rio\r\n * @returns {boolean} - true se √© super admin\r\n */\nexport const isSuperAdmin = user => {\n  if (!user) return false;\n\n  // Verifica por role\n  const role = (user.role || user.tipo_usuario || '').toLowerCase();\n  if (role === 'admin' || role === 'administrador') {\n    return true;\n  }\n\n  // Verifica por username espec√≠fico\n  const username = (user.username || user.nome_usuario || user.email || '').toLowerCase();\n  return ADMIN_ACCESS_CONFIG.SUPER_USERS.some(superUser => username.includes(superUser.toLowerCase()));\n};\n\n/**\r\n * For√ßa o acesso para administradores - BYPASS completo de permiss√µes\r\n * @param {Object} user - Dados do usu√°rio\r\n * @param {string} action - A√ß√£o desejada\r\n * @param {string} resource - Recurso alvo\r\n * @returns {boolean} - true se deve permitir acesso\r\n */\nexport const forceAdminAccess = (user, action, resource) => {\n  // Se √© super admin, SEMPRE permite\n  if (isSuperAdmin(user)) {\n    console.log(`üîì ADMIN ACCESS: Usu√°rio ${user.nome_usuario || user.email} tem acesso TOTAL como administrador`);\n    return true;\n  }\n  return false;\n};\n\n/**\r\n * Verifica se uma rota √© sempre permitida para admins\r\n * @param {Object} user - Dados do usu√°rio  \r\n * @param {string} route - Rota desejada\r\n * @returns {boolean} - true se deve permitir\r\n */\nexport const forceAdminRouteAccess = (user, route) => {\n  if (isSuperAdmin(user)) {\n    // Admin pode acessar QUALQUER rota\n    console.log(`üîì ADMIN ROUTE ACCESS: Administrador ${user.nome_usuario || user.email} pode acessar rota: ${route}`);\n    return true;\n  }\n  return false;\n};\n\n/**\r\n * Middleware de autentica√ß√£o que garante acesso administrativo\r\n * @param {Object} user - Dados do usu√°rio\r\n * @param {string} action - A√ß√£o tentada  \r\n * @param {string} resource - Recurso alvo\r\n * @param {Function} normalCheck - Fun√ß√£o de verifica√ß√£o normal de permiss√£o\r\n * @returns {boolean} - Resultado final da verifica√ß√£o\r\n */\nexport const checkAccessWithAdminOverride = (user, action, resource, normalCheck) => {\n  // PRIMEIRO: Verifica se √© admin com acesso for√ßado\n  if (forceAdminAccess(user, action, resource)) {\n    return true;\n  }\n\n  // SEGUNDO: Se n√£o √© admin, usa verifica√ß√£o normal\n  return normalCheck ? normalCheck() : false;\n};\n\n/**\r\n * Helper para exibir mensagens de acesso administrativo\r\n * @param {Object} user - Dados do usu√°rio\r\n * @returns {string} - Mensagem apropriada\r\n */\nexport const getAdminAccessMessage = user => {\n  if (isSuperAdmin(user)) {\n    return `‚úÖ Acesso TOTAL de Administrador confirmado para: ${user.nome_usuario || user.email}`;\n  }\n  const role = (user === null || user === void 0 ? void 0 : user.role) || (user === null || user === void 0 ? void 0 : user.tipo_usuario) || 'Usu√°rio';\n  return `‚ÑπÔ∏è Acesso baseado no perfil: ${role}`;\n};\nexport default {\n  ADMIN_ACCESS_CONFIG,\n  isSuperAdmin,\n  forceAdminAccess,\n  forceAdminRouteAccess,\n  checkAccessWithAdminOverride,\n  getAdminAccessMessage\n};","map":{"version":3,"names":["ADMIN_ACCESS_CONFIG","SUPER_USERS","ADMIN_ALWAYS_ALLOWED_ROUTES","ADMIN_ALWAYS_ALLOWED_ACTIONS","ADMIN_ALWAYS_ALLOWED_RESOURCES","isSuperAdmin","user","role","tipo_usuario","toLowerCase","username","nome_usuario","email","some","superUser","includes","forceAdminAccess","action","resource","console","log","forceAdminRouteAccess","route","checkAccessWithAdminOverride","normalCheck","getAdminAccessMessage"],"sources":["C:/Users/JoaoPedro/Desktop/CEPAS-1/src/config/adminAccess.js"],"sourcesContent":["// src/config/adminAccess.js\r\n// Configura√ß√£o especial para garantir acesso total de administradores\r\n\r\n/**\r\n * Configura√ß√£o de acesso administrativo\r\n * ADMINS t√™m poder M√ÅXIMO e podem fazer TUDO no sistema\r\n */\r\nexport const ADMIN_ACCESS_CONFIG = {\r\n    // Lista de usu√°rios que sempre t√™m acesso total (al√©m dos admins)\r\n    SUPER_USERS: [\r\n        'admin', \r\n        'administrador',\r\n        'root',\r\n        'super_admin'\r\n    ],\r\n    \r\n    // Rotas que SEMPRE est√£o dispon√≠veis para admins\r\n    ADMIN_ALWAYS_ALLOWED_ROUTES: [\r\n        '/cadastro-familia',\r\n        '/cadastro-monitor',\r\n        '/lista-familias', \r\n        '/lista-monitores',\r\n        '/editar-familia',\r\n        '/consulta',\r\n        '/consulta-geral',\r\n        '/admin',\r\n        '/configuracoes',\r\n        '/usuarios',\r\n        '/relatorios'\r\n    ],\r\n\r\n    // A√ß√µes que admins SEMPRE podem fazer\r\n    ADMIN_ALWAYS_ALLOWED_ACTIONS: [\r\n        'read',\r\n        'write', \r\n        'update',\r\n        'delete',\r\n        'create',\r\n        'manage',\r\n        'configure',\r\n        'admin'\r\n    ],\r\n\r\n    // Recursos que admins SEMPRE podem gerenciar\r\n    ADMIN_ALWAYS_ALLOWED_RESOURCES: [\r\n        'familias',\r\n        'monitores', \r\n        'usuarios',\r\n        'entrevistas',\r\n        'cadastros',\r\n        'relatorios',\r\n        'configuracoes',\r\n        'sistema',\r\n        'dados'\r\n    ]\r\n};\r\n\r\n/**\r\n * Verifica se um usu√°rio √© um super admin com acesso total\r\n * @param {Object} user - Dados do usu√°rio\r\n * @returns {boolean} - true se √© super admin\r\n */\r\nexport const isSuperAdmin = (user) => {\r\n    if (!user) return false;\r\n    \r\n    // Verifica por role\r\n    const role = (user.role || user.tipo_usuario || '').toLowerCase();\r\n    if (role === 'admin' || role === 'administrador') {\r\n        return true;\r\n    }\r\n    \r\n    // Verifica por username espec√≠fico\r\n    const username = (user.username || user.nome_usuario || user.email || '').toLowerCase();\r\n    return ADMIN_ACCESS_CONFIG.SUPER_USERS.some(superUser => \r\n        username.includes(superUser.toLowerCase())\r\n    );\r\n};\r\n\r\n/**\r\n * For√ßa o acesso para administradores - BYPASS completo de permiss√µes\r\n * @param {Object} user - Dados do usu√°rio\r\n * @param {string} action - A√ß√£o desejada\r\n * @param {string} resource - Recurso alvo\r\n * @returns {boolean} - true se deve permitir acesso\r\n */\r\nexport const forceAdminAccess = (user, action, resource) => {\r\n    // Se √© super admin, SEMPRE permite\r\n    if (isSuperAdmin(user)) {\r\n        console.log(`üîì ADMIN ACCESS: Usu√°rio ${user.nome_usuario || user.email} tem acesso TOTAL como administrador`);\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n};\r\n\r\n/**\r\n * Verifica se uma rota √© sempre permitida para admins\r\n * @param {Object} user - Dados do usu√°rio  \r\n * @param {string} route - Rota desejada\r\n * @returns {boolean} - true se deve permitir\r\n */\r\nexport const forceAdminRouteAccess = (user, route) => {\r\n    if (isSuperAdmin(user)) {\r\n        // Admin pode acessar QUALQUER rota\r\n        console.log(`üîì ADMIN ROUTE ACCESS: Administrador ${user.nome_usuario || user.email} pode acessar rota: ${route}`);\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n};\r\n\r\n/**\r\n * Middleware de autentica√ß√£o que garante acesso administrativo\r\n * @param {Object} user - Dados do usu√°rio\r\n * @param {string} action - A√ß√£o tentada  \r\n * @param {string} resource - Recurso alvo\r\n * @param {Function} normalCheck - Fun√ß√£o de verifica√ß√£o normal de permiss√£o\r\n * @returns {boolean} - Resultado final da verifica√ß√£o\r\n */\r\nexport const checkAccessWithAdminOverride = (user, action, resource, normalCheck) => {\r\n    // PRIMEIRO: Verifica se √© admin com acesso for√ßado\r\n    if (forceAdminAccess(user, action, resource)) {\r\n        return true;\r\n    }\r\n    \r\n    // SEGUNDO: Se n√£o √© admin, usa verifica√ß√£o normal\r\n    return normalCheck ? normalCheck() : false;\r\n};\r\n\r\n/**\r\n * Helper para exibir mensagens de acesso administrativo\r\n * @param {Object} user - Dados do usu√°rio\r\n * @returns {string} - Mensagem apropriada\r\n */\r\nexport const getAdminAccessMessage = (user) => {\r\n    if (isSuperAdmin(user)) {\r\n        return `‚úÖ Acesso TOTAL de Administrador confirmado para: ${user.nome_usuario || user.email}`;\r\n    }\r\n    \r\n    const role = user?.role || user?.tipo_usuario || 'Usu√°rio';\r\n    return `‚ÑπÔ∏è Acesso baseado no perfil: ${role}`;\r\n};\r\n\r\nexport default {\r\n    ADMIN_ACCESS_CONFIG,\r\n    isSuperAdmin,\r\n    forceAdminAccess,\r\n    forceAdminRouteAccess,\r\n    checkAccessWithAdminOverride,\r\n    getAdminAccessMessage\r\n};"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,mBAAmB,GAAG;EAC/B;EACAC,WAAW,EAAE,CACT,OAAO,EACP,eAAe,EACf,MAAM,EACN,aAAa,CAChB;EAED;EACAC,2BAA2B,EAAE,CACzB,mBAAmB,EACnB,mBAAmB,EACnB,iBAAiB,EACjB,kBAAkB,EAClB,iBAAiB,EACjB,WAAW,EACX,iBAAiB,EACjB,QAAQ,EACR,gBAAgB,EAChB,WAAW,EACX,aAAa,CAChB;EAED;EACAC,4BAA4B,EAAE,CAC1B,MAAM,EACN,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,OAAO,CACV;EAED;EACAC,8BAA8B,EAAE,CAC5B,UAAU,EACV,WAAW,EACX,UAAU,EACV,aAAa,EACb,WAAW,EACX,YAAY,EACZ,eAAe,EACf,SAAS,EACT,OAAO;AAEf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAIC,IAAI,IAAK;EAClC,IAAI,CAACA,IAAI,EAAE,OAAO,KAAK;;EAEvB;EACA,MAAMC,IAAI,GAAG,CAACD,IAAI,CAACC,IAAI,IAAID,IAAI,CAACE,YAAY,IAAI,EAAE,EAAEC,WAAW,CAAC,CAAC;EACjE,IAAIF,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,eAAe,EAAE;IAC9C,OAAO,IAAI;EACf;;EAEA;EACA,MAAMG,QAAQ,GAAG,CAACJ,IAAI,CAACI,QAAQ,IAAIJ,IAAI,CAACK,YAAY,IAAIL,IAAI,CAACM,KAAK,IAAI,EAAE,EAAEH,WAAW,CAAC,CAAC;EACvF,OAAOT,mBAAmB,CAACC,WAAW,CAACY,IAAI,CAACC,SAAS,IACjDJ,QAAQ,CAACK,QAAQ,CAACD,SAAS,CAACL,WAAW,CAAC,CAAC,CAC7C,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,gBAAgB,GAAGA,CAACV,IAAI,EAAEW,MAAM,EAAEC,QAAQ,KAAK;EACxD;EACA,IAAIb,YAAY,CAACC,IAAI,CAAC,EAAE;IACpBa,OAAO,CAACC,GAAG,CAAC,4BAA4Bd,IAAI,CAACK,YAAY,IAAIL,IAAI,CAACM,KAAK,sCAAsC,CAAC;IAC9G,OAAO,IAAI;EACf;EAEA,OAAO,KAAK;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,qBAAqB,GAAGA,CAACf,IAAI,EAAEgB,KAAK,KAAK;EAClD,IAAIjB,YAAY,CAACC,IAAI,CAAC,EAAE;IACpB;IACAa,OAAO,CAACC,GAAG,CAAC,wCAAwCd,IAAI,CAACK,YAAY,IAAIL,IAAI,CAACM,KAAK,uBAAuBU,KAAK,EAAE,CAAC;IAClH,OAAO,IAAI;EACf;EAEA,OAAO,KAAK;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,4BAA4B,GAAGA,CAACjB,IAAI,EAAEW,MAAM,EAAEC,QAAQ,EAAEM,WAAW,KAAK;EACjF;EACA,IAAIR,gBAAgB,CAACV,IAAI,EAAEW,MAAM,EAAEC,QAAQ,CAAC,EAAE;IAC1C,OAAO,IAAI;EACf;;EAEA;EACA,OAAOM,WAAW,GAAGA,WAAW,CAAC,CAAC,GAAG,KAAK;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAInB,IAAI,IAAK;EAC3C,IAAID,YAAY,CAACC,IAAI,CAAC,EAAE;IACpB,OAAO,oDAAoDA,IAAI,CAACK,YAAY,IAAIL,IAAI,CAACM,KAAK,EAAE;EAChG;EAEA,MAAML,IAAI,GAAG,CAAAD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,IAAI,MAAID,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,YAAY,KAAI,SAAS;EAC1D,OAAO,gCAAgCD,IAAI,EAAE;AACjD,CAAC;AAED,eAAe;EACXP,mBAAmB;EACnBK,YAAY;EACZW,gBAAgB;EAChBK,qBAAqB;EACrBE,4BAA4B;EAC5BE;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}