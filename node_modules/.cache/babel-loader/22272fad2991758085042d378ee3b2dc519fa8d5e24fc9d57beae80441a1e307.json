{"ast":null,"code":"/**\r\n * cepasService.js\r\n * Funções para interagir com o Backend (API Node.js/Express).\r\n * Agora compatível com Docker e com funções CRUD completas.\r\n */\n\n// Define a URL base para chamadas de API.\n// Usa a variável de ambiente REACT_APP_API_BASE_URL (para Docker) ou volta para localhost (desenvolvimento).\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api';\n// Define o nome da tabela que este serviço irá manipular\nconst TABLE_NAME = 'Familia';\n\n// -------------------------------------------------------------------\n// 1. FUNÇÃO DE CRIAÇÃO (POST) - Rota: POST /api/dados/Familia\n// -------------------------------------------------------------------\n\n/**\r\n * Envia um novo registro de família completo para o backend.\r\n * Inclui família, endereço, animal, estrutura e saneamento.\r\n * @param {Object} familiaData - Os dados completos da família a serem criados.\r\n * @returns {Object} O objeto de resposta do backend (com o novo ID, por exemplo).\r\n */\nexport async function createFamilia(familiaData) {\n  const url = `${API_BASE_URL}/familia-completa`; // Nova rota específica\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-user': 'usuario_sistema' // Header para auditoria\n      },\n      body: JSON.stringify(familiaData)\n    });\n    if (!response.ok) {\n      let errorMessage = 'Falha ao cadastrar a família.';\n      try {\n        const errorBody = await response.json();\n        errorMessage = errorBody.message || errorBody.error || errorMessage;\n      } catch (e) {\n        // Se não conseguir fazer parse do JSON, usa o texto da resposta\n        errorMessage = (await response.text()) || errorMessage;\n      }\n      throw new Error(`Erro ${response.status}: ${errorMessage}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Erro no serviço createFamilia:', error);\n    throw error;\n  }\n}\n\n// -------------------------------------------------------------------\n// 2. FUNÇÃO DE CONSULTA (GET) - Rota: GET /api/dados/Familia\n// -------------------------------------------------------------------\n\n/**\r\n * Busca todos os registros de famílias no backend usando o endpoint otimizado.\r\n * @returns {Array<Object>} Uma lista de objetos de famílias.\r\n */\nexport async function getFamilias() {\n  const url = `${API_BASE_URL}/familias`; // Novo endpoint otimizado\n\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-user': 'usuario_sistema'\n      }\n    });\n    if (!response.ok) {\n      let errorMessage = 'Falha ao buscar as famílias.';\n      try {\n        const errorBody = await response.json();\n        errorMessage = errorBody.message || errorBody.error || errorMessage;\n      } catch (e) {\n        errorMessage = (await response.text()) || errorMessage;\n      }\n      throw new Error(`Erro ${response.status}: ${errorMessage}`);\n    }\n    const result = await response.json();\n    return result.data || []; // Retorna o array de dados\n  } catch (error) {\n    console.error('Erro no serviço getFamilias:', error);\n    throw error;\n  }\n}\n\n// -------------------------------------------------------------------\n// 3. FUNÇÃO DE ATUALIZAÇÃO (PUT) - Rota: PUT /api/dados/Familia/:id\n// -------------------------------------------------------------------\n\n/**\r\n * Atualiza um registro de família existente.\r\n * @param {string | number} id - O ID da família a ser atualizada.\r\n * @param {Object} familiaData - Os dados da família a serem atualizados.\r\n * @returns {Object} O objeto de resposta do backend.\r\n */\nexport async function updateFamilia(id, familiaData) {\n  // Adiciona o ID ao final da URL\n  const url = `${API_BASE_URL}/dados/${TABLE_NAME}/${id}`;\n  try {\n    const response = await fetch(url, {\n      method: 'PUT',\n      // Usamos PUT para atualização completa\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(familiaData)\n    });\n    if (!response.ok) {\n      const errorBody = await response.json();\n      throw new Error(`Erro ${response.status}: ${errorBody.error || 'Falha ao atualizar a família.'}`);\n    }\n\n    // Retorna o resultado da operação (pode ser um status OK ou o objeto atualizado)\n    return response.json();\n  } catch (error) {\n    console.error('Erro no serviço updateFamilia:', error);\n    throw error;\n  }\n}\n\n// -------------------------------------------------------------------\n// 4. FUNÇÃO DE EXCLUSÃO (DELETE) - Rota: DELETE /api/dados/Familia/:id\n// -------------------------------------------------------------------\n\n/**\r\n * Exclui um registro de família.\r\n * @param {string | number} id - O ID da família a ser excluída.\r\n * @returns {Object} O objeto de resposta do backend (geralmente um status de sucesso).\r\n */\nexport async function deleteFamilia(id) {\n  // Adiciona o ID ao final da URL\n  const url = `${API_BASE_URL}/dados/${TABLE_NAME}/${id}`;\n  try {\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json' // Necessário para alguns servidores\n      }\n    });\n\n    // O backend pode não retornar corpo para DELETE, apenas verificamos o status.\n    if (!response.ok) {\n      // Tenta obter o corpo, se houver\n      const errorBody = await response.json().catch(() => ({\n        error: 'Nenhuma resposta detalhada.'\n      }));\n      throw new Error(`Erro ${response.status}: ${errorBody.error || 'Falha ao excluir a família.'}`);\n    }\n\n    // Se a exclusão for bem-sucedida (ex: 200, 204), retornamos sucesso.\n    return {\n      success: true,\n      message: `Família com ID ${id} excluída com sucesso.`\n    };\n  } catch (error) {\n    console.error('Erro no serviço deleteFamilia:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","TABLE_NAME","createFamilia","familiaData","url","response","fetch","method","headers","body","JSON","stringify","ok","errorMessage","errorBody","json","message","error","e","text","Error","status","console","getFamilias","result","data","updateFamilia","id","deleteFamilia","catch","success"],"sources":["C:/Users/gusta/Downloads/CEPAS/src/services/cepasService.js"],"sourcesContent":["/**\r\n * cepasService.js\r\n * Funções para interagir com o Backend (API Node.js/Express).\r\n * Agora compatível com Docker e com funções CRUD completas.\r\n */\r\n\r\n// Define a URL base para chamadas de API.\r\n// Usa a variável de ambiente REACT_APP_API_BASE_URL (para Docker) ou volta para localhost (desenvolvimento).\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api'; \r\n// Define o nome da tabela que este serviço irá manipular\r\nconst TABLE_NAME = 'Familia'; \r\n\r\n// -------------------------------------------------------------------\r\n// 1. FUNÇÃO DE CRIAÇÃO (POST) - Rota: POST /api/dados/Familia\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Envia um novo registro de família completo para o backend.\r\n * Inclui família, endereço, animal, estrutura e saneamento.\r\n * @param {Object} familiaData - Os dados completos da família a serem criados.\r\n * @returns {Object} O objeto de resposta do backend (com o novo ID, por exemplo).\r\n */\r\nexport async function createFamilia(familiaData) {\r\n    const url = `${API_BASE_URL}/familia-completa`; // Nova rota específica\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-user': 'usuario_sistema' // Header para auditoria\r\n            },\r\n            body: JSON.stringify(familiaData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            let errorMessage = 'Falha ao cadastrar a família.';\r\n            try {\r\n                const errorBody = await response.json();\r\n                errorMessage = errorBody.message || errorBody.error || errorMessage;\r\n            } catch (e) {\r\n                // Se não conseguir fazer parse do JSON, usa o texto da resposta\r\n                errorMessage = await response.text() || errorMessage;\r\n            }\r\n            throw new Error(`Erro ${response.status}: ${errorMessage}`);\r\n        }\r\n\r\n        return response.json();\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço createFamilia:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n// -------------------------------------------------------------------\r\n// 2. FUNÇÃO DE CONSULTA (GET) - Rota: GET /api/dados/Familia\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Busca todos os registros de famílias no backend usando o endpoint otimizado.\r\n * @returns {Array<Object>} Uma lista de objetos de famílias.\r\n */\r\nexport async function getFamilias() {\r\n    const url = `${API_BASE_URL}/familias`; // Novo endpoint otimizado\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-user': 'usuario_sistema'\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            let errorMessage = 'Falha ao buscar as famílias.';\r\n            try {\r\n                const errorBody = await response.json();\r\n                errorMessage = errorBody.message || errorBody.error || errorMessage;\r\n            } catch (e) {\r\n                errorMessage = await response.text() || errorMessage;\r\n            }\r\n            throw new Error(`Erro ${response.status}: ${errorMessage}`);\r\n        }\r\n        \r\n        const result = await response.json();\r\n        return result.data || []; // Retorna o array de dados\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço getFamilias:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n// 3. FUNÇÃO DE ATUALIZAÇÃO (PUT) - Rota: PUT /api/dados/Familia/:id\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Atualiza um registro de família existente.\r\n * @param {string | number} id - O ID da família a ser atualizada.\r\n * @param {Object} familiaData - Os dados da família a serem atualizados.\r\n * @returns {Object} O objeto de resposta do backend.\r\n */\r\nexport async function updateFamilia(id, familiaData) {\r\n    // Adiciona o ID ao final da URL\r\n    const url = `${API_BASE_URL}/dados/${TABLE_NAME}/${id}`;\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'PUT', // Usamos PUT para atualização completa\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(familiaData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorBody = await response.json();\r\n            throw new Error(`Erro ${response.status}: ${errorBody.error || 'Falha ao atualizar a família.'}`);\r\n        }\r\n\r\n        // Retorna o resultado da operação (pode ser um status OK ou o objeto atualizado)\r\n        return response.json();\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço updateFamilia:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n// 4. FUNÇÃO DE EXCLUSÃO (DELETE) - Rota: DELETE /api/dados/Familia/:id\r\n// -------------------------------------------------------------------\r\n\r\n/**\r\n * Exclui um registro de família.\r\n * @param {string | number} id - O ID da família a ser excluída.\r\n * @returns {Object} O objeto de resposta do backend (geralmente um status de sucesso).\r\n */\r\nexport async function deleteFamilia(id) {\r\n    // Adiciona o ID ao final da URL\r\n    const url = `${API_BASE_URL}/dados/${TABLE_NAME}/${id}`;\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json', // Necessário para alguns servidores\r\n            },\r\n        });\r\n\r\n        // O backend pode não retornar corpo para DELETE, apenas verificamos o status.\r\n        if (!response.ok) {\r\n            // Tenta obter o corpo, se houver\r\n            const errorBody = await response.json().catch(() => ({ error: 'Nenhuma resposta detalhada.' }));\r\n            throw new Error(`Erro ${response.status}: ${errorBody.error || 'Falha ao excluir a família.'}`);\r\n        }\r\n\r\n        // Se a exclusão for bem-sucedida (ex: 200, 204), retornamos sucesso.\r\n        return { success: true, message: `Família com ID ${id} excluída com sucesso.` };\r\n\r\n    } catch (error) {\r\n        console.error('Erro no serviço deleteFamilia:', error);\r\n        throw error;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}